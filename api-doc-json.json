{
    "openapi": "3.0.0",
    "paths": {
        "/api/v1/organizations": {
            "get": {
                "operationId": "OrganizationsController_findAll",
                "x-resourceset-urn": "iam-list",
                "summary": "Get organizations",
                "parameters": [
                    {
                        "name": "x-api-key",
                        "in": "header",
                        "description": "API key",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter",
                        "required": true,
                        "in": "query",
                        "description": "An object condition to search/filter",
                        "example": "{\"parent_id\": null,\"take\":5,\"skip\":25,\"order\":{\"name\":1}}",
                        "schema": {}
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Organizations successfully retrieved.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Organization"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "Bad Request Error": {
                                "example": {
                                    "statusCode": 400,
                                    "message": "Invalid request body. The message will vary depending on the cause.",
                                    "error": "Bad Request"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden Request",
                        "content": {
                            "Forbidden Request": {
                                "example": {
                                    "statusCode": 403,
                                    "message": "You do not have permission to do this action.",
                                    "error": "Forbidden Request"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Request",
                        "content": {
                            "Too Many Request to Auth0 Error": {
                                "example": {
                                    "statusCode": 429,
                                    "message": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers.",
                                    "error": "Too Many Request"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Organization Management"
                ],
                "security": [
                    {
                        "token": []
                    }
                ]
            }
        },
        "/api/v1/organizations/check-name": {
            "get": {
                "operationId": "OrganizationsController_checkOrganizationName",
                "x-resourceset-urn": "iam-read",
                "summary": "Check name of organization is existing?",
                "parameters": [
                    {
                        "name": "x-api-key",
                        "in": "header",
                        "description": "API key",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "current_organization_id",
                        "required": false,
                        "in": "query",
                        "description": "Current Organization (id) when you want to update",
                        "example": "org_dFx7oiL9n1UeFvi5",
                        "schema": {}
                    },
                    {
                        "name": "parent_id",
                        "required": false,
                        "in": "query",
                        "description": "Parent Organization (id) when create",
                        "example": "org_dFx7oiL9n1UeFvi5",
                        "schema": {}
                    },
                    {
                        "name": "name",
                        "required": true,
                        "in": "query",
                        "description": "The Name you want to check",
                        "example": "Hello",
                        "schema": {}
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Organization name checked status.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "Bad Request Error": {
                                "example": {
                                    "statusCode": 400,
                                    "message": "Invalid request body. The message will vary depending on the cause.",
                                    "error": "Bad Request"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden Request",
                        "content": {
                            "Forbidden Request": {
                                "example": {
                                    "statusCode": 403,
                                    "message": "You do not have permission to do this action.",
                                    "error": "Forbidden Request"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Organization Management"
                ],
                "security": [
                    {
                        "token": []
                    }
                ]
            }
        },
        "/api/v1/organizations/{id}": {
            "get": {
                "operationId": "OrganizationsController_findOne",
                "x-resourceset-urn": "iam-read",
                "summary": "Get organization",
                "parameters": [
                    {
                        "name": "x-api-key",
                        "in": "header",
                        "description": "API key",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "required": true,
                        "in": "path",
                        "description": "ID of the organization to retrieve.",
                        "example": "org_dFx7oiL9n1UeFvi5",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Organization successfully retrieved.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Organization"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "Bad Request Error": {
                                "example": {
                                    "statusCode": 400,
                                    "message": "Invalid request body. The message will vary depending on the cause.",
                                    "error": "Bad Request"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden Request",
                        "content": {
                            "Forbidden Request": {
                                "example": {
                                    "statusCode": 403,
                                    "message": "You do not have permission to do this action.",
                                    "error": "Forbidden Request"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "Not Found": {
                                "example": {
                                    "statusCode": 404,
                                    "message": "The organization does not exist.",
                                    "error": "Not Found"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Request",
                        "content": {
                            "Too Many Request to Auth0 Error": {
                                "example": {
                                    "statusCode": 429,
                                    "message": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers.",
                                    "error": "Too Many Request"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Organization Management"
                ],
                "security": [
                    {
                        "token": []
                    }
                ]
            },
            "patch": {
                "operationId": "OrganizationsController_updateOne",
                "x-resourceset-urn": "iam-update",
                "summary": "Modify an Organization",
                "parameters": [
                    {
                        "name": "x-api-key",
                        "in": "header",
                        "description": "API key",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "required": true,
                        "in": "path",
                        "description": "Organization identifier.",
                        "example": "org_dFx7oiL9n1UeFvi5",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateOrganizationDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Organization successfully updated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Organization"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "Bad Request Error": {
                                "example": {
                                    "statusCode": 400,
                                    "message": "Invalid request body. The message will vary depending on the cause.",
                                    "error": "Bad Request"
                                }
                            },
                            "Bad Request": {
                                "example": {
                                    "message": [
                                        "name must match /^[a-z0-9][a-z0-9_]{2,30}$/ regular expression",
                                        "name must be shorter than or equal to 30 characters",
                                        "description must be shorter than or equal to 200 characters",
                                        "property parent_id should not exist"
                                    ],
                                    "error": "Bad Request",
                                    "statusCode": 400
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden Request",
                        "content": {
                            "Forbidden Request": {
                                "example": {
                                    "statusCode": 403,
                                    "message": "You do not have permission to do this action.",
                                    "error": "Forbidden Request"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "Not Found": {
                                "example": {
                                    "statusCode": 404,
                                    "message": "The organization does not exist.",
                                    "error": "Not Found"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict Request",
                        "content": {
                            "Conflict Error": {
                                "example": {
                                    "statusCode": 409,
                                    "message": "Name had been used for another organization",
                                    "error": "Conflict"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Request",
                        "content": {
                            "Too Many Request to Auth0 Error": {
                                "example": {
                                    "statusCode": 429,
                                    "message": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers.",
                                    "error": "Too Many Request"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Organization Management"
                ],
                "security": [
                    {
                        "token": []
                    }
                ]
            },
            "delete": {
                "operationId": "OrganizationsController_delete",
                "x-resourceset-urn": "iam-delete",
                "summary": "Delete an organization-group",
                "parameters": [
                    {
                        "name": "x-api-key",
                        "in": "header",
                        "description": "API key",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "required": true,
                        "in": "path",
                        "description": "Organization identifier.",
                        "example": "org_dFx7oiL9n1UeFvi5",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Remove Organization successfully."
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "Bad Request Error": {
                                "example": {
                                    "statusCode": 400,
                                    "message": "Invalid request body. The message will vary depending on the cause.",
                                    "error": "Bad Request"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden Request",
                        "content": {
                            "Forbidden Request": {
                                "example": {
                                    "statusCode": 403,
                                    "message": "You do not have permission to do this action.",
                                    "error": "Forbidden Request"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "Not Found": {
                                "example": {
                                    "statusCode": 404,
                                    "message": "The organization does not exist.",
                                    "error": "Not Found"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Request",
                        "content": {
                            "Too Many Request to Auth0 Error": {
                                "example": {
                                    "statusCode": 429,
                                    "message": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers.",
                                    "error": "Too Many Request"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Organization Management"
                ],
                "security": [
                    {
                        "token": []
                    }
                ]
            }
        },
        "/api/v1/organizations/{id}/invitations": {
            "post": {
                "operationId": "OrganizationsController_createInvitation",
                "x-resourceset-urn": "iam-create",
                "summary": "Create invitations to organization",
                "parameters": [
                    {
                        "name": "x-api-key",
                        "in": "header",
                        "description": "API key",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "required": true,
                        "in": "path",
                        "description": "Organization identifier.",
                        "example": "org_dFx7oiL9n1UeFvi5",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateOrganizationInvitationDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Invitation successfully created.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserInvitationDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "Bad Request Error": {
                                "example": {
                                    "statusCode": 400,
                                    "message": "Invalid request body. The message will vary depending on the cause.",
                                    "error": "Bad Request"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden Request",
                        "content": {
                            "Forbidden Request": {
                                "example": {
                                    "statusCode": 403,
                                    "message": "You do not have permission to do this action.",
                                    "error": "Forbidden Request"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "Not Found": {
                                "example": {
                                    "statusCode": 404,
                                    "message": "No organization found by that id.",
                                    "error": "Not Found"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Request",
                        "content": {
                            "Too Many Request to Auth0 Error": {
                                "example": {
                                    "statusCode": 429,
                                    "message": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers.",
                                    "error": "Too Many Request"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Organization Management"
                ],
                "security": [
                    {
                        "token": []
                    }
                ]
            },
            "get": {
                "operationId": "OrganizationsController_getInvitations",
                "x-resourceset-urn": "iam-list",
                "summary": "Get invitations to organization",
                "parameters": [
                    {
                        "name": "x-api-key",
                        "in": "header",
                        "description": "API key",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "required": true,
                        "in": "path",
                        "description": "Organization identifier.",
                        "example": "org_dFx7oiL9n1UeFvi5",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter",
                        "required": true,
                        "in": "query",
                        "description": "An object condition to search/filter",
                        "example": "{\"page\":0,\"per_page\":10,\"sort\":\"created_at:-1\",\"status\":\"ACTIVE\",\"q\":\"string@email.com\",\"created_from_time\":\"2021-07-19T11:34:22.545Z\",\"created_to_time\":\"2025-07-19T11:34:22.545Z\",\"expires_from_time\":\"2021-07-19T11:34:22.545Z\",\"expires_to_time\":\"2025-07-19T11:34:22.545Z\"}",
                        "schema": {}
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Invitations successfully retrieved.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/UserInvitationDto"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "Bad Request Error": {
                                "example": {
                                    "statusCode": 400,
                                    "message": "Invalid request body. The message will vary depending on the cause.",
                                    "error": "Bad Request"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden Request",
                        "content": {
                            "Forbidden Request": {
                                "example": {
                                    "statusCode": 403,
                                    "message": "You do not have permission to do this action.",
                                    "error": "Forbidden Request"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "Not Found": {
                                "example": {
                                    "statusCode": 404,
                                    "message": "The organization does not exist.",
                                    "error": "Not Found"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Request",
                        "content": {
                            "Too Many Request to Auth0 Error": {
                                "example": {
                                    "statusCode": 429,
                                    "message": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers.",
                                    "error": "Too Many Request"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Organization Management"
                ],
                "security": [
                    {
                        "token": []
                    }
                ]
            }
        },
        "/api/v1/organizations/{id}/invitation-history": {
            "get": {
                "operationId": "OrganizationsController_getInvitationHistory",
                "x-resourceset-urn": "iam-list",
                "summary": "Get invitations to organization",
                "parameters": [
                    {
                        "name": "x-api-key",
                        "in": "header",
                        "description": "API key",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "required": true,
                        "in": "path",
                        "description": "Organization identifier.",
                        "example": "org_dFx7oiL9n1UeFvi5",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter",
                        "required": true,
                        "in": "query",
                        "description": "An object condition to search/filter",
                        "example": "{\"page\":0,\"per_page\":10,\"sort\":\"created_at:-1\",\"status\":\"INVITED\",\"invitee_email\":\"string\",\"inviter_id\":\"string\",\"created_from_time\":\"2021-07-19T11:34:22.545Z\",\"created_to_time\":\"2025-07-19T11:34:22.545Z\",\"expires_from_time\":\"2021-07-19T11:34:22.545Z\",\"expires_to_time\":\"2025-07-19T11:34:22.545Z\"}",
                        "schema": {}
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Invitations successfully retrieved.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/UserInvitationDto"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "Bad Request Error": {
                                "example": {
                                    "statusCode": 400,
                                    "message": "Invalid request body. The message will vary depending on the cause.",
                                    "error": "Bad Request"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden Request",
                        "content": {
                            "Forbidden Request": {
                                "example": {
                                    "statusCode": 403,
                                    "message": "You do not have permission to do this action.",
                                    "error": "Forbidden Request"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "Not Found": {
                                "example": {
                                    "statusCode": 404,
                                    "message": "The organization does not exist.",
                                    "error": "Not Found"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Request",
                        "content": {
                            "Too Many Request to Auth0 Error": {
                                "example": {
                                    "statusCode": 429,
                                    "message": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers.",
                                    "error": "Too Many Request"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Organization Management"
                ],
                "security": [
                    {
                        "token": []
                    }
                ]
            }
        },
        "/api/v1/organizations/{id}/invitations/{invitationId}": {
            "get": {
                "operationId": "OrganizationsController_getInvitation",
                "x-resourceset-urn": "iam-read",
                "summary": "Get an invitation to organization",
                "parameters": [
                    {
                        "name": "x-api-key",
                        "in": "header",
                        "description": "API key",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "required": true,
                        "in": "path",
                        "description": "Organization identifier.",
                        "example": "org_dFx7oiL9n1UeFvi5",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "invitationId",
                        "required": true,
                        "in": "path",
                        "description": "The id of the user invitation.",
                        "example": "uinv_Fl69DU8hLple513t",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Invitation successfully retrieved.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/UserInvitationDto"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "Bad Request Error": {
                                "example": {
                                    "statusCode": 400,
                                    "message": "Invalid request body. The message will vary depending on the cause.",
                                    "error": "Bad Request"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden Request",
                        "content": {
                            "Forbidden Request": {
                                "example": {
                                    "statusCode": 403,
                                    "message": "You do not have permission to do this action.",
                                    "error": "Forbidden Request"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "Not Found": {
                                "example": {
                                    "statusCode": 404,
                                    "message": "The organization does not exist.",
                                    "error": "Not Found"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Request",
                        "content": {
                            "Too Many Request to Auth0 Error": {
                                "example": {
                                    "statusCode": 429,
                                    "message": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers.",
                                    "error": "Too Many Request"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Organization Management"
                ],
                "security": [
                    {
                        "token": []
                    }
                ]
            },
            "delete": {
                "operationId": "OrganizationsController_deleteInvitation",
                "x-resourceset-urn": "iam-delete",
                "summary": "Delete an invitation to organization",
                "parameters": [
                    {
                        "name": "x-api-key",
                        "in": "header",
                        "description": "API key",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "required": true,
                        "in": "path",
                        "description": "Organization identifier.",
                        "example": "org_dFx7oiL9n1UeFvi5",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "invitationId",
                        "required": true,
                        "in": "path",
                        "description": "The id of the user invitation.",
                        "example": "uinv_Fl69DU8hLple513t",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Invitation successfully deleted."
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "Bad Request Error": {
                                "example": {
                                    "statusCode": 400,
                                    "message": "Invalid request body. The message will vary depending on the cause.",
                                    "error": "Bad Request"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden Request",
                        "content": {
                            "Forbidden Request": {
                                "example": {
                                    "statusCode": 403,
                                    "message": "You do not have permission to do this action.",
                                    "error": "Forbidden Request"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "Not Found": {
                                "example": {
                                    "statusCode": 404,
                                    "message": "The organization does not exist.",
                                    "error": "Not Found"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Request",
                        "content": {
                            "Too Many Request to Auth0 Error": {
                                "example": {
                                    "statusCode": 429,
                                    "message": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers.",
                                    "error": "Too Many Request"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Organization Management"
                ],
                "security": [
                    {
                        "token": []
                    }
                ]
            }
        },
        "/api/v1/organizations/{id}/invitations/{invitationId}/resend": {
            "post": {
                "operationId": "OrganizationsController_resendInvitation",
                "x-resourceset-urn": "iam-create",
                "summary": "Resend an invitation",
                "parameters": [
                    {
                        "name": "x-api-key",
                        "in": "header",
                        "description": "API key",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "required": true,
                        "in": "path",
                        "description": "Organization identifier.",
                        "example": "org_dFx7oiL9n1UeFvi5",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "invitationId",
                        "required": true,
                        "in": "path",
                        "description": "The id of the user invitation.",
                        "example": "uinv_Fl69DU8hLple513t",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Invitation successfully created.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserInvitationDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "Bad Request Error": {
                                "example": {
                                    "statusCode": 400,
                                    "message": "Invalid request body. The message will vary depending on the cause.",
                                    "error": "Bad Request"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden Request",
                        "content": {
                            "Forbidden Request": {
                                "example": {
                                    "statusCode": 403,
                                    "message": "You do not have permission to do this action.",
                                    "error": "Forbidden Request"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "Not Found": {
                                "example": {
                                    "statusCode": 404,
                                    "message": "No organization found by that id.",
                                    "error": "Not Found"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Request",
                        "content": {
                            "Too Many Request to Auth0 Error": {
                                "example": {
                                    "statusCode": 429,
                                    "message": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers.",
                                    "error": "Too Many Request"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Organization Management"
                ],
                "security": [
                    {
                        "token": []
                    }
                ]
            }
        },
        "/api/v1/organizations/{id}/enabled_connections": {
            "get": {
                "operationId": "OrganizationsController_getEnabledConnections",
                "x-resourceset-urn": "iam-list",
                "summary": "Get connections enabled for an organization",
                "parameters": [
                    {
                        "name": "x-api-key",
                        "in": "header",
                        "description": "API key",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "required": true,
                        "in": "path",
                        "description": "Organization identifier.",
                        "example": "org_dFx7oiL9n1UeFvi5",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter",
                        "required": true,
                        "in": "query",
                        "description": "An object condition to search/filter",
                        "example": "{\"page\": 0, \"per_page\": 50}",
                        "schema": {}
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Members successfully retrieved.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/OrganizationConnectionDto"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "Bad Request Error": {
                                "example": {
                                    "statusCode": 400,
                                    "message": "Invalid request body. The message will vary depending on the cause.",
                                    "error": "Bad Request"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden Request",
                        "content": {
                            "Forbidden Request": {
                                "example": {
                                    "statusCode": 403,
                                    "message": "You do not have permission to do this action.",
                                    "error": "Forbidden Request"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Request",
                        "content": {
                            "Too Many Request to Auth0 Error": {
                                "example": {
                                    "statusCode": 429,
                                    "message": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers.",
                                    "error": "Too Many Request"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Organization Management"
                ],
                "security": [
                    {
                        "token": []
                    }
                ]
            }
        },
        "/api/v1/organizations/switch/{id}": {
            "get": {
                "operationId": "OrganizationsController_switchOrganization",
                "x-resourceset-urn": "iam-read",
                "summary": "Get organizations",
                "parameters": [
                    {
                        "name": "x-api-key",
                        "in": "header",
                        "description": "API key",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "required": true,
                        "in": "path",
                        "description": "Generate sub jwt token when switching to manage a sub org from another org",
                        "example": "org_dFx7oiL9n1UeFvi5",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Switch org successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/SubOrganizationAuth"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "Bad Request Error": {
                                "example": {
                                    "statusCode": 400,
                                    "message": "Invalid request body. The message will vary depending on the cause.",
                                    "error": "Bad Request"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden Request",
                        "content": {
                            "Forbidden Request": {
                                "example": {
                                    "statusCode": 403,
                                    "message": "You do not have permission to do this action.",
                                    "error": "Forbidden Request"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Request",
                        "content": {
                            "Too Many Request to Auth0 Error": {
                                "example": {
                                    "statusCode": 429,
                                    "message": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers.",
                                    "error": "Too Many Request"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Organization Management"
                ],
                "security": [
                    {
                        "token": []
                    }
                ]
            }
        },
        "/api/v1/public-users/{id}/invitation/verify/{ticketId}": {
            "get": {
                "operationId": "UsersPublicController_verify",
                "x-access-level": "public",
                "summary": "Verify if invitation is valid",
                "parameters": [
                    {
                        "name": "id",
                        "required": true,
                        "in": "path",
                        "description": "Organization identifier.",
                        "example": "org_ElN68kO8N3zEzgWy",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "ticketId",
                        "required": true,
                        "in": "path",
                        "description": "Ticket id of invitation",
                        "example": "org_ElN68kO8N3zEzgWy",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Invitation is valid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserInvitationBriefDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "Bad Request Error": {
                                "example": {
                                    "statusCode": 400,
                                    "message": "Invalid request body. The message will vary depending on the cause.",
                                    "error": "Bad Request"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "Not Found": {
                                "example": {
                                    "statusCode": 404,
                                    "message": "Invalid invitation",
                                    "error": "Not Found"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Request",
                        "content": {
                            "Too Many Request to Auth0 Error": {
                                "example": {
                                    "statusCode": 429,
                                    "message": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers.",
                                    "error": "Too Many Request"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Public API for user"
                ]
            },
            "post": {
                "operationId": "UsersPublicController_create",
                "x-access-level": "public",
                "summary": "Complete user invitation",
                "parameters": [
                    {
                        "name": "id",
                        "required": true,
                        "in": "path",
                        "description": "Organization identifier.",
                        "example": "org_ElN68kO8N3zEzgWy",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "ticketId",
                        "required": true,
                        "in": "path",
                        "description": "Ticket id of invitation",
                        "example": "org_ElN68kO8N3zEzgWy",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserInvitationOnboard"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "User successfully created.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "Bad Request Error": {
                                "example": {
                                    "statusCode": 400,
                                    "message": "Invalid request body. The message will vary depending on the cause.",
                                    "error": "Bad Request"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "Not Found": {
                                "example": {
                                    "statusCode": 404,
                                    "message": "Invalid invitation",
                                    "error": "Not Found"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict Request",
                        "content": {
                            "Conflict Error": {
                                "example": {
                                    "statusCode": 409,
                                    "message": "User already exists.",
                                    "error": "Conflict"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Request",
                        "content": {
                            "Too Many Request to Auth0 Error": {
                                "example": {
                                    "statusCode": 429,
                                    "message": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers.",
                                    "error": "Too Many Request"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Public API for user"
                ]
            }
        },
        "/api/v1/service-groups/feature-list": {
            "get": {
                "operationId": "ServiceGroupsController_findAllFeature",
                "x-resourceset-urn": "iam-list",
                "parameters": [
                    {
                        "name": "x-api-key",
                        "in": "header",
                        "description": "API key",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter",
                        "required": false,
                        "in": "query",
                        "example": "{\"where\": {\"name\": \"User Management\"}}",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ServiceGroupListDto"
                                    }
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Feature Group Management"
                ],
                "security": [
                    {
                        "token": []
                    }
                ]
            }
        },
        "/api/v1/service-groups": {
            "post": {
                "operationId": "ServiceGroupsController_create",
                "x-resourceset-urn": "iam-create",
                "parameters": [
                    {
                        "name": "x-api-key",
                        "in": "header",
                        "description": "API key",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateServiceGroupDto"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServiceGroup"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Feature Group Management"
                ],
                "security": [
                    {
                        "token": []
                    }
                ]
            },
            "get": {
                "operationId": "ServiceGroupsController_findAll",
                "x-resourceset-urn": "iam-list",
                "parameters": [
                    {
                        "name": "x-api-key",
                        "in": "header",
                        "description": "API key",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter",
                        "required": false,
                        "in": "query",
                        "example": "{\"where\": {\"name\": \"MyFeatureGroup\"}}",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ServiceGroup"
                                    }
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Feature Group Management"
                ],
                "security": [
                    {
                        "token": []
                    }
                ]
            }
        },
        "/api/v1/service-groups/{id}": {
            "get": {
                "operationId": "ServiceGroupsController_findOne",
                "x-resourceset-urn": "iam-read",
                "parameters": [
                    {
                        "name": "x-api-key",
                        "in": "header",
                        "description": "API key",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "options",
                        "required": false,
                        "in": "query",
                        "example": "{\"relations\": [\"parent\", \"labels\", \"templates\", \"dataSets\", \"dataTypes\"]}",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServiceGroup"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Feature Group Management"
                ],
                "security": [
                    {
                        "token": []
                    }
                ]
            },
            "patch": {
                "operationId": "ServiceGroupsController_update",
                "x-resourceset-urn": "iam-update",
                "parameters": [
                    {
                        "name": "x-api-key",
                        "in": "header",
                        "description": "API key",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateServiceGroupDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": ""
                    }
                },
                "tags": [
                    "Feature Group Management"
                ],
                "security": [
                    {
                        "token": []
                    }
                ]
            },
            "delete": {
                "operationId": "ServiceGroupsController_remove",
                "x-resourceset-urn": "iam-delete",
                "parameters": [
                    {
                        "name": "x-api-key",
                        "in": "header",
                        "description": "API key",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    }
                },
                "tags": [
                    "Feature Group Management"
                ],
                "security": [
                    {
                        "token": []
                    }
                ]
            }
        },
        "/api/v1/resource-sets": {
            "post": {
                "operationId": "ResourceSetsController_create",
                "x-resourceset-urn": "iam-create",
                "summary": "Create new resource set",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateResourceSetDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Resource set successfully created.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceSet"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "Bad Request Error": {
                                "example": {
                                    "statusCode": 400,
                                    "message": "Invalid request body. The message will vary depending on the cause.",
                                    "error": "Bad Request"
                                }
                            },
                            "Bad Request": {
                                "example": {
                                    "message": [
                                        "organizationId must match /^org_[a-zA-Z0-9]{2,30}$/ regular expression",
                                        "organizationId should not be empty",
                                        "name must be shorter than or equal to 50 characters",
                                        "name must match /^[a-z0-9][a-z0-9_]{0,50}$/ regular expression",
                                        "name should not be empty",
                                        "displayName should not be empty"
                                    ],
                                    "error": "Bad Request",
                                    "statusCode": 400
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden Request",
                        "content": {
                            "Forbidden Request": {
                                "example": {
                                    "statusCode": 403,
                                    "message": "You do not have permission to do this action.",
                                    "error": "Forbidden Request"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict Request",
                        "content": {
                            "Conflict Error": {
                                "example": {
                                    "statusCode": 409,
                                    "message": "Another resource set with this name already exists in same organization.",
                                    "error": "Conflict"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Request",
                        "content": {
                            "Too Many Request to Auth0 Error": {
                                "example": {
                                    "statusCode": 429,
                                    "message": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers.",
                                    "error": "Too Many Request"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Resource Management"
                ],
                "security": [
                    {
                        "token": []
                    }
                ]
            },
            "get": {
                "operationId": "ResourceSetsController_findAll",
                "x-resourceset-urn": "iam-list",
                "summary": "Get resource sets",
                "parameters": [
                    {
                        "name": "filter",
                        "required": true,
                        "in": "query",
                        "description": "An object condition to search/filter",
                        "example": "{\"where\":{\"name\":\"xxx\"},\"take\": 10, \"skip\": 10, \"order\": {\"name\": -1}}",
                        "schema": {}
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Resource sets successfully retrieved.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ResourceSet"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "Bad Request Error": {
                                "example": {
                                    "statusCode": 400,
                                    "message": "Invalid request body. The message will vary depending on the cause.",
                                    "error": "Bad Request"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden Request",
                        "content": {
                            "Forbidden Request": {
                                "example": {
                                    "statusCode": 403,
                                    "message": "You do not have permission to do this action.",
                                    "error": "Forbidden Request"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Request",
                        "content": {
                            "Too Many Request to Auth0 Error": {
                                "example": {
                                    "statusCode": 429,
                                    "message": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers.",
                                    "error": "Too Many Request"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Resource Management"
                ],
                "security": [
                    {
                        "token": []
                    }
                ]
            }
        },
        "/api/v1/resource-sets/{id}": {
            "get": {
                "operationId": "ResourceSetsController_findOne",
                "x-resourceset-urn": "iam-read",
                "summary": "Get resource set",
                "parameters": [
                    {
                        "name": "id",
                        "required": true,
                        "in": "path",
                        "description": "ID of the resource set to retrieve.",
                        "example": "df795f2f-c034-4b67-a1c2-87d49f7a5034",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Resource set successfully retrieved.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceSet"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "Bad Request Error": {
                                "example": {
                                    "statusCode": 400,
                                    "message": "Invalid request body. The message will vary depending on the cause.",
                                    "error": "Bad Request"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden Request",
                        "content": {
                            "Forbidden Request": {
                                "example": {
                                    "statusCode": 403,
                                    "message": "You do not have permission to do this action.",
                                    "error": "Forbidden Request"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "Not Found": {
                                "example": {
                                    "statusCode": 404,
                                    "message": "The resource set does not exist.",
                                    "error": "Not Found"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Request",
                        "content": {
                            "Too Many Request to Auth0 Error": {
                                "example": {
                                    "statusCode": 429,
                                    "message": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers.",
                                    "error": "Too Many Request"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Resource Management"
                ],
                "security": [
                    {
                        "token": []
                    }
                ]
            },
            "patch": {
                "operationId": "ResourceSetsController_update",
                "x-resourceset-urn": "iam-update",
                "summary": "Modify an Resource set",
                "parameters": [
                    {
                        "name": "id",
                        "required": true,
                        "in": "path",
                        "description": "ID of the resource set to retrieve.",
                        "example": "df795f2f-c034-4b67-a1c2-87d49f7a5034",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateResourceSetDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Resource set successfully updated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceSet"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "Bad Request Error": {
                                "example": {
                                    "statusCode": 400,
                                    "message": "Invalid request body. The message will vary depending on the cause.",
                                    "error": "Bad Request"
                                }
                            },
                            "Bad Request": {
                                "example": {
                                    "message": [
                                        "name must match /^[a-z0-9][a-z0-9_]{0,50}$/ regular expression",
                                        "name should not be empty",
                                        "displayName should not be empty"
                                    ],
                                    "error": "Bad Request",
                                    "statusCode": 400
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden Request",
                        "content": {
                            "Forbidden Request": {
                                "example": {
                                    "statusCode": 403,
                                    "message": "You do not have permission to do this action.",
                                    "error": "Forbidden Request"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "Not Found": {
                                "example": {
                                    "statusCode": 404,
                                    "message": "The resource set does not exist.",
                                    "error": "Not Found"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict Request",
                        "content": {
                            "Conflict Error": {
                                "example": {
                                    "statusCode": 409,
                                    "message": "Another resource set with this name already exists in same organization",
                                    "error": "Conflict"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Request",
                        "content": {
                            "Too Many Request to Auth0 Error": {
                                "example": {
                                    "statusCode": 429,
                                    "message": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers.",
                                    "error": "Too Many Request"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Resource Management"
                ],
                "security": [
                    {
                        "token": []
                    }
                ]
            },
            "delete": {
                "operationId": "ResourceSetsController_remove",
                "x-resourceset-urn": "iam-delete",
                "summary": "Soft Delete an resource set",
                "parameters": [
                    {
                        "name": "id",
                        "required": true,
                        "in": "path",
                        "description": "ID of the resource set to retrieve.",
                        "example": "df795f2f-c034-4b67-a1c2-87d49f7a5034",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Remove resource set successfully."
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "Bad Request Error": {
                                "example": {
                                    "statusCode": 400,
                                    "message": "Invalid request body. The message will vary depending on the cause.",
                                    "error": "Bad Request"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden Request",
                        "content": {
                            "Forbidden Request": {
                                "example": {
                                    "statusCode": 403,
                                    "message": "You do not have permission to do this action.",
                                    "error": "Forbidden Request"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "Not Found": {
                                "example": {
                                    "statusCode": 404,
                                    "message": "The resource set does not exist.",
                                    "error": "Not Found"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Request",
                        "content": {
                            "Too Many Request to Auth0 Error": {
                                "example": {
                                    "statusCode": 429,
                                    "message": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers.",
                                    "error": "Too Many Request"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Resource Management"
                ],
                "security": [
                    {
                        "token": []
                    }
                ]
            }
        },
        "/api/v1/resources": {
            "post": {
                "operationId": "ResourcesController_create",
                "x-resourceset-urn": "iam-create",
                "summary": "Create new resource",
                "parameters": [
                    {
                        "name": "x-api-key",
                        "in": "header",
                        "description": "API key",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateResourceDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Resource successfully created.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "Bad Request Error": {
                                "example": {
                                    "statusCode": 400,
                                    "message": "Invalid request body. The message will vary depending on the cause.",
                                    "error": "Bad Request"
                                }
                            },
                            "Bad Request": {
                                "example": {
                                    "message": [
                                        "organizationId must match /^org_[a-zA-Z0-9]{2,30}$/ regular expression",
                                        "organizationId should not be empty",
                                        "name must be shorter than or equal to 50 characters",
                                        "name must match /^[a-z0-9][a-z0-9_]{0,50}$/ regular expression",
                                        "name should not be empty",
                                        "uri should not be empty",
                                        "each value in permissions must be a string",
                                        "permissions should not be empty",
                                        "resource_set_id should not be empty",
                                        "resource_set_id must be a UUID"
                                    ],
                                    "error": "Bad Request",
                                    "statusCode": 400
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden Request",
                        "content": {
                            "Forbidden Request": {
                                "example": {
                                    "statusCode": 403,
                                    "message": "You do not have permission to do this action.",
                                    "error": "Forbidden Request"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict Request",
                        "content": {
                            "Conflict Error": {
                                "example": {
                                    "statusCode": 409,
                                    "message": "Another resource with this name already exists in same organization.",
                                    "error": "Conflict"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Request",
                        "content": {
                            "Too Many Request to Auth0 Error": {
                                "example": {
                                    "statusCode": 429,
                                    "message": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers.",
                                    "error": "Too Many Request"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Resource Management"
                ],
                "security": [
                    {
                        "token": []
                    }
                ]
            },
            "get": {
                "operationId": "ResourcesController_findAll",
                "x-resourceset-urn": "iam-list",
                "summary": "Get resource sets",
                "parameters": [
                    {
                        "name": "x-api-key",
                        "in": "header",
                        "description": "API key",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter",
                        "required": true,
                        "in": "query",
                        "description": "An object condition to search/filter",
                        "example": "{\"where\":{\"name\":\"xxx\"},\"take\": 10, \"skip\": 10, \"order\": {\"name\": -1}}",
                        "schema": {}
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Resources successfully retrieved.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ResourceDto"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": ""
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden Request",
                        "content": {
                            "Forbidden Request": {
                                "example": {
                                    "statusCode": 403,
                                    "message": "You do not have permission to do this action.",
                                    "error": "Forbidden Request"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Request",
                        "content": {
                            "Too Many Request to Auth0 Error": {
                                "example": {
                                    "statusCode": 429,
                                    "message": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers.",
                                    "error": "Too Many Request"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Resource Management"
                ],
                "security": [
                    {
                        "token": []
                    }
                ]
            }
        },
        "/api/v1/resources/resource-reload": {
            "get": {
                "operationId": "ResourcesController_reloadResources",
                "x-resourceset-urn": "iam-create",
                "summary": "Reload resources",
                "parameters": [
                    {
                        "name": "x-api-key",
                        "in": "header",
                        "description": "API key",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "version",
                        "required": true,
                        "in": "query",
                        "description": "version of api doc",
                        "example": "2.1.1",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "service-key",
                        "required": true,
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "apidoc",
                        "required": true,
                        "in": "query",
                        "description": "Url of api doc in json format",
                        "example": "https://bot-os-iam-dev.webtiga.com/api-doc-json",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "resourceSetUrl",
                        "required": true,
                        "in": "query",
                        "description": "Url of resource set in json format",
                        "example": "https://raw.githubusercontent.com/hieudd3/dummy/main/resource-sets-json.json",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "true: user has permission to access resource",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServiceApiVersion"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": ""
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden Request",
                        "content": {
                            "Forbidden Request": {
                                "example": {
                                    "statusCode": 403,
                                    "message": "You do not have permission to do this action.",
                                    "error": "Forbidden Request"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Request",
                        "content": {
                            "Too Many Request to Auth0 Error": {
                                "example": {
                                    "statusCode": 429,
                                    "message": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers.",
                                    "error": "Too Many Request"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Resource Management"
                ],
                "security": [
                    {
                        "token": []
                    }
                ]
            }
        },
        "/api/v1/resources/{id}": {
            "get": {
                "operationId": "ResourcesController_findOne",
                "x-resourceset-urn": "iam-read",
                "summary": "Get resource",
                "parameters": [
                    {
                        "name": "x-api-key",
                        "in": "header",
                        "description": "API key",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "required": true,
                        "in": "path",
                        "description": "ID of the resource set to retrieve.",
                        "example": "644a643fc023e970469d8e1e",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Resource successfully retrieved.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": ""
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden Request",
                        "content": {
                            "Forbidden Request": {
                                "example": {
                                    "statusCode": 403,
                                    "message": "You do not have permission to do this action.",
                                    "error": "Forbidden Request"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "Not Found": {
                                "example": {
                                    "statusCode": 404,
                                    "message": "The resource does not exist.",
                                    "error": "Not Found"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Request",
                        "content": {
                            "Too Many Request to Auth0 Error": {
                                "example": {
                                    "statusCode": 429,
                                    "message": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers.",
                                    "error": "Too Many Request"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Resource Management"
                ],
                "security": [
                    {
                        "token": []
                    }
                ]
            },
            "patch": {
                "operationId": "ResourcesController_update",
                "x-resourceset-urn": "iam-update",
                "summary": "Modify an Resource",
                "parameters": [
                    {
                        "name": "x-api-key",
                        "in": "header",
                        "description": "API key",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "required": true,
                        "in": "path",
                        "description": "ID of the resource to retrieve.",
                        "example": "644a643fc023e970469d8e1e",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateResourceDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Resource set successfully updated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "Bad Request Error": {
                                "example": {
                                    "statusCode": 400,
                                    "message": "Invalid request body. The message will vary depending on the cause.",
                                    "error": "Bad Request"
                                }
                            },
                            "Bad Request": {
                                "example": {
                                    "message": [
                                        "name must match /^[a-z0-9][a-z0-9_]{0,50}$/ regular expression",
                                        "name should not be empty",
                                        "uri should not be empty",
                                        "each value in permissions must be a string"
                                    ],
                                    "error": "Bad Request",
                                    "statusCode": 400
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden Request",
                        "content": {
                            "Forbidden Request": {
                                "example": {
                                    "statusCode": 403,
                                    "message": "You do not have permission to do this action.",
                                    "error": "Forbidden Request"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "Not Found": {
                                "example": {
                                    "statusCode": 404,
                                    "message": "The resource does not exist.",
                                    "error": "Not Found"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict Request",
                        "content": {
                            "Conflict Error": {
                                "example": {
                                    "statusCode": 409,
                                    "message": "Another resource with this name already exists in same organization",
                                    "error": "Conflict"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Request",
                        "content": {
                            "Too Many Request to Auth0 Error": {
                                "example": {
                                    "statusCode": 429,
                                    "message": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers.",
                                    "error": "Too Many Request"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Resource Management"
                ],
                "security": [
                    {
                        "token": []
                    }
                ]
            },
            "delete": {
                "operationId": "ResourcesController_remove",
                "x-resourceset-urn": "iam-delete",
                "summary": "Soft Delete an resource",
                "parameters": [
                    {
                        "name": "x-api-key",
                        "in": "header",
                        "description": "API key",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "required": true,
                        "in": "path",
                        "description": "ID of the resource to retrieve.",
                        "example": "644a643fc023e970469d8e1e",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Remove resource successfully."
                    },
                    "400": {
                        "description": ""
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden Request",
                        "content": {
                            "Forbidden Request": {
                                "example": {
                                    "statusCode": 403,
                                    "message": "You do not have permission to do this action.",
                                    "error": "Forbidden Request"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "Not Found": {
                                "example": {
                                    "statusCode": 404,
                                    "message": "The resource does not exist.",
                                    "error": "Not Found"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Request",
                        "content": {
                            "Too Many Request to Auth0 Error": {
                                "example": {
                                    "statusCode": 429,
                                    "message": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers.",
                                    "error": "Too Many Request"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Resource Management"
                ],
                "security": [
                    {
                        "token": []
                    }
                ]
            }
        },
        "/api/v1/users": {
            "get": {
                "operationId": "UsersController_findAll",
                "x-resourceset-urn": "iam-list",
                "summary": "List or search user in Auth0",
                "parameters": [
                    {
                        "name": "x-api-key",
                        "in": "header",
                        "description": "API key",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter",
                        "required": true,
                        "in": "query",
                        "description": "An object condition to search/filter",
                        "example": "{\"page\": 0, \"per_page\": 50, \"sort\": \"created_at:1\", \"q\":\"organization_id:org_zuyd5RInoCc5r9kR\"}",
                        "schema": {}
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Users successfully retrieved.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/UserDto"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "Bad Request Error": {
                                "example": {
                                    "statusCode": 400,
                                    "message": "Invalid request body. The message will vary depending on the cause.",
                                    "error": "Bad Request"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden Request",
                        "content": {
                            "Forbidden Request": {
                                "example": {
                                    "statusCode": 403,
                                    "message": "You do not have permission to do this action.",
                                    "error": "Forbidden Request"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Request",
                        "content": {
                            "Too Many Request to Auth0 Error": {
                                "example": {
                                    "statusCode": 429,
                                    "message": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers.",
                                    "error": "Too Many Request"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "User Management"
                ],
                "security": [
                    {
                        "token": []
                    }
                ]
            }
        },
        "/api/v1/users/check-email": {
            "get": {
                "operationId": "UsersController_checkEmailExist",
                "x-resourceset-urn": "iam-read",
                "summary": "Check email existing",
                "parameters": [
                    {
                        "name": "x-api-key",
                        "in": "header",
                        "description": "API key",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "email",
                        "required": true,
                        "in": "query",
                        "description": "Email must be check.",
                        "example": "vn.chemgio@yahoo.com",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "organizationId",
                        "required": false,
                        "in": "query",
                        "description": "Organization must be check. Leave with empty for global check.",
                        "example": "org_6th6gVS4qISSXO5z",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User email checked updated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "Bad Request Error": {
                                "example": {
                                    "statusCode": 400,
                                    "message": "Invalid request body. The message will vary depending on the cause.",
                                    "error": "Bad Request"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "Not Found": {
                                "example": {
                                    "statusCode": 404,
                                    "message": "No organization found by that id or name.",
                                    "error": "Not Found"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Request",
                        "content": {
                            "Too Many Request to Auth0 Error": {
                                "example": {
                                    "statusCode": 429,
                                    "message": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers.",
                                    "error": "Too Many Request"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "User Management"
                ],
                "security": [
                    {
                        "token": []
                    }
                ]
            }
        },
        "/api/v1/users/whoami": {
            "get": {
                "operationId": "UsersController_isAuthenticated",
                "x-resourceset-urn": "iam-read",
                "summary": "Check if access token is valid",
                "parameters": [
                    {
                        "name": "x-api-key",
                        "in": "header",
                        "description": "API key",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "true: access token is valid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden Request",
                        "content": {
                            "Forbidden Request": {
                                "example": {
                                    "statusCode": 403,
                                    "message": "You do not have permission to do this action.",
                                    "error": "Forbidden Request"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Request",
                        "content": {
                            "Too Many Request to Auth0 Error": {
                                "example": {
                                    "statusCode": 429,
                                    "message": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers.",
                                    "error": "Too Many Request"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "User Management"
                ],
                "security": [
                    {
                        "token": []
                    }
                ]
            }
        },
        "/api/v1/users/my-info": {
            "get": {
                "operationId": "UsersController_getMyInfo",
                "x-access-level": "protected",
                "x-resourceset-urn": "iam-read",
                "summary": "Get info of current logged in user",
                "parameters": [
                    {
                        "name": "x-api-key",
                        "in": "header",
                        "description": "API key",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Current logged in user detail",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserDto"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden Request",
                        "content": {
                            "Forbidden Request": {
                                "example": {
                                    "statusCode": 403,
                                    "message": "You do not have permission to do this action.",
                                    "error": "Forbidden Request"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Request",
                        "content": {
                            "Too Many Request to Auth0 Error": {
                                "example": {
                                    "statusCode": 429,
                                    "message": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers.",
                                    "error": "Too Many Request"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "User Management"
                ],
                "security": [
                    {
                        "token": []
                    }
                ]
            }
        },
        "/api/v1/users/{id}": {
            "get": {
                "operationId": "UsersController_findOne",
                "x-resourceset-urn": "iam-read",
                "summary": "Retrieve user details. A list of fields to include or exclude may also be specified.",
                "parameters": [
                    {
                        "name": "x-api-key",
                        "in": "header",
                        "description": "API key",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "required": true,
                        "in": "path",
                        "description": "ID of the user to retrieve.",
                        "example": "auth0|64d9c4a9e4780fda44d3206c",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User successfully retrieved.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "Bad Request Error": {
                                "example": {
                                    "statusCode": 400,
                                    "message": "Invalid request body. The message will vary depending on the cause.",
                                    "error": "Bad Request"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden Request",
                        "content": {
                            "Forbidden Request": {
                                "example": {
                                    "statusCode": 403,
                                    "message": "You do not have permission to do this action.",
                                    "error": "Forbidden Request"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "Not Found": {
                                "example": {
                                    "statusCode": 404,
                                    "message": "User not found.",
                                    "error": "Not Found"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Request",
                        "content": {
                            "Too Many Request to Auth0 Error": {
                                "example": {
                                    "statusCode": 429,
                                    "message": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers.",
                                    "error": "Too Many Request"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "User Management"
                ],
                "security": [
                    {
                        "token": []
                    }
                ]
            },
            "patch": {
                "operationId": "UsersController_updateOne",
                "x-resourceset-urn": "iam-update",
                "summary": "Update a User",
                "parameters": [
                    {
                        "name": "x-api-key",
                        "in": "header",
                        "description": "API key",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "required": true,
                        "in": "path",
                        "description": "ID of the user to update.",
                        "example": "auth0|64d9c4a9e4780fda44d3206c",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateUserDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "User successfully updated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "Bad Request Error": {
                                "example": {
                                    "statusCode": 400,
                                    "message": "Invalid request body. The message will vary depending on the cause.",
                                    "error": "Bad Request"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden Request",
                        "content": {
                            "Forbidden Request": {
                                "example": {
                                    "statusCode": 403,
                                    "message": "You do not have permission to do this action.",
                                    "error": "Forbidden Request"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "Not Found": {
                                "example": {
                                    "statusCode": 404,
                                    "message": "User not found.",
                                    "error": "Not Found"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Request",
                        "content": {
                            "Too Many Request to Auth0 Error": {
                                "example": {
                                    "statusCode": 429,
                                    "message": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers.",
                                    "error": "Too Many Request"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "User Management"
                ],
                "security": [
                    {
                        "token": []
                    }
                ]
            },
            "delete": {
                "operationId": "UsersController_delete",
                "x-resourceset-urn": "iam-delete",
                "summary": "Delete a User",
                "parameters": [
                    {
                        "name": "x-api-key",
                        "in": "header",
                        "description": "API key",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "required": true,
                        "in": "path",
                        "description": "ID of the user to delete.",
                        "example": "auth0|64d9c4a9e4780fda44d3206c",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User successfully deleted."
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "Bad Request Error": {
                                "example": {
                                    "statusCode": 400,
                                    "message": "Invalid request body. The message will vary depending on the cause.",
                                    "error": "Bad Request"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden Request",
                        "content": {
                            "Forbidden Request": {
                                "example": {
                                    "statusCode": 403,
                                    "message": "You do not have permission to do this action.",
                                    "error": "Forbidden Request"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Request",
                        "content": {
                            "Too Many Request to Auth0 Error": {
                                "example": {
                                    "statusCode": 429,
                                    "message": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers.",
                                    "error": "Too Many Request"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "User Management"
                ],
                "security": [
                    {
                        "token": []
                    }
                ]
            }
        },
        "/api/v1/users/{id}/organizations": {
            "get": {
                "operationId": "UsersController_findUserOrganizations",
                "x-resourceset-urn": "iam-list",
                "summary": "Retrieve user organizations",
                "parameters": [
                    {
                        "name": "x-api-key",
                        "in": "header",
                        "description": "API key",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "required": true,
                        "in": "path",
                        "description": "ID of the user to retrieve.",
                        "example": "auth0|64d9c4a9e4780fda44d3206c",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter",
                        "required": true,
                        "in": "query",
                        "description": "An object condition to search/filter",
                        "example": "{\"page\": 0, \"per_page\": 1, \"search\": \"unifygpt_ai\"}",
                        "schema": {}
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User successfully retrieved.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "Bad Request Error": {
                                "example": {
                                    "statusCode": 400,
                                    "message": "Invalid request body. The message will vary depending on the cause.",
                                    "error": "Bad Request"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden Request",
                        "content": {
                            "Forbidden Request": {
                                "example": {
                                    "statusCode": 403,
                                    "message": "You do not have permission to do this action.",
                                    "error": "Forbidden Request"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "Not Found": {
                                "example": {
                                    "statusCode": 404,
                                    "message": "User not found.",
                                    "error": "Not Found"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Request",
                        "content": {
                            "Too Many Request to Auth0 Error": {
                                "example": {
                                    "statusCode": 429,
                                    "message": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers.",
                                    "error": "Too Many Request"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "User Management"
                ],
                "security": [
                    {
                        "token": []
                    }
                ]
            }
        },
        "/api/v1/users/{id}/roles": {
            "patch": {
                "operationId": "UsersController_updateRoles",
                "x-resourceset-urn": "iam-update",
                "summary": "Update a User",
                "parameters": [
                    {
                        "name": "x-api-key",
                        "in": "header",
                        "description": "API key",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "required": true,
                        "in": "path",
                        "description": "ID of the user to update.",
                        "example": "auth0|64d9c4a9e4780fda44d3206c",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateUserRoleDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "User successfully updated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "Bad Request Error": {
                                "example": {
                                    "statusCode": 400,
                                    "message": "Invalid request body. The message will vary depending on the cause.",
                                    "error": "Bad Request"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden Request",
                        "content": {
                            "Forbidden Request": {
                                "example": {
                                    "statusCode": 403,
                                    "message": "You do not have permission to do this action.",
                                    "error": "Forbidden Request"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "Not Found": {
                                "example": {
                                    "statusCode": 404,
                                    "message": "User not found.",
                                    "error": "Not Found"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Request",
                        "content": {
                            "Too Many Request to Auth0 Error": {
                                "example": {
                                    "statusCode": 429,
                                    "message": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers.",
                                    "error": "Too Many Request"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "User Management"
                ],
                "security": [
                    {
                        "token": []
                    }
                ]
            }
        },
        "/api/v1/roles": {
            "post": {
                "operationId": "RolesController_create",
                "x-resourceset-urn": "iam-create",
                "summary": "Create a role for given org",
                "parameters": [
                    {
                        "name": "x-api-key",
                        "in": "header",
                        "description": "API key",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateRoleDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Role successfully created.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RoleDetailDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "Bad Request Error": {
                                "example": {
                                    "statusCode": 400,
                                    "message": "Invalid request body. The message will vary depending on the cause.",
                                    "error": "Bad Request"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden Request",
                        "content": {
                            "Forbidden Request": {
                                "example": {
                                    "statusCode": 403,
                                    "message": "You do not have permission to do this action.",
                                    "error": "Forbidden Request"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Request",
                        "content": {
                            "Too Many Request to Auth0 Error": {
                                "example": {
                                    "statusCode": 429,
                                    "message": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers.",
                                    "error": "Too Many Request"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Role Management"
                ],
                "security": [
                    {
                        "token": []
                    }
                ]
            },
            "get": {
                "operationId": "RolesController_findAll",
                "x-resourceset-urn": "iam-list",
                "summary": "Get roles of given org",
                "parameters": [
                    {
                        "name": "x-api-key",
                        "in": "header",
                        "description": "API key",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter",
                        "required": true,
                        "in": "query",
                        "description": "An object condition to search/filter",
                        "example": "{\"skip\":0, \"take\":2, \"order\": {\"createdAt\":\"ASC\"}, \"where\":{\"name\":\"admin\"}}",
                        "schema": {}
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Roles successfully retrieved.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/RoleSearchDto"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "Bad Request Error": {
                                "example": {
                                    "statusCode": 400,
                                    "message": "Invalid request body. The message will vary depending on the cause.",
                                    "error": "Bad Request"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden Request",
                        "content": {
                            "Forbidden Request": {
                                "example": {
                                    "statusCode": 403,
                                    "message": "You do not have permission to do this action.",
                                    "error": "Forbidden Request"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Request",
                        "content": {
                            "Too Many Request to Auth0 Error": {
                                "example": {
                                    "statusCode": 429,
                                    "message": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers.",
                                    "error": "Too Many Request"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Role Management"
                ],
                "security": [
                    {
                        "token": []
                    }
                ]
            }
        },
        "/api/v1/roles/{id}": {
            "get": {
                "operationId": "RolesController_findOne",
                "x-resourceset-urn": "iam-read",
                "summary": "Get a role of given org by role id",
                "parameters": [
                    {
                        "name": "x-api-key",
                        "in": "header",
                        "description": "API key",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "required": true,
                        "in": "path",
                        "description": "ID of the role to retrieve.",
                        "example": "9b11d29d-0205-421c-9aac-78ac726c7d83",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Role successfully retrieved.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RoleDetailDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "Bad Request Error": {
                                "example": {
                                    "statusCode": 400,
                                    "message": "Invalid request body. The message will vary depending on the cause.",
                                    "error": "Bad Request"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden Request",
                        "content": {
                            "Forbidden Request": {
                                "example": {
                                    "statusCode": 403,
                                    "message": "You do not have permission to do this action.",
                                    "error": "Forbidden Request"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "Not Found": {
                                "example": {
                                    "statusCode": 404,
                                    "message": "Role not found.",
                                    "error": "Not Found"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Request",
                        "content": {
                            "Too Many Request to Auth0 Error": {
                                "example": {
                                    "statusCode": 429,
                                    "message": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers.",
                                    "error": "Too Many Request"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Role Management"
                ],
                "security": [
                    {
                        "token": []
                    }
                ]
            },
            "patch": {
                "operationId": "RolesController_updateOne",
                "x-resourceset-urn": "iam-update",
                "summary": "Update a role of given org by role id",
                "parameters": [
                    {
                        "name": "x-api-key",
                        "in": "header",
                        "description": "API key",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "required": true,
                        "in": "path",
                        "description": "ID of the role to update.",
                        "example": "9b11d29d-0205-421c-9aac-78ac726c7d83",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateRoleDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Role successfully updated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Role"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "Bad Request Error": {
                                "example": {
                                    "statusCode": 400,
                                    "message": "Invalid request body. The message will vary depending on the cause.",
                                    "error": "Bad Request"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden Request",
                        "content": {
                            "Forbidden Request": {
                                "example": {
                                    "statusCode": 403,
                                    "message": "You do not have permission to do this action.",
                                    "error": "Forbidden Request"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Request",
                        "content": {
                            "Too Many Request to Auth0 Error": {
                                "example": {
                                    "statusCode": 429,
                                    "message": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers.",
                                    "error": "Too Many Request"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Role Management"
                ],
                "security": [
                    {
                        "token": []
                    }
                ]
            },
            "delete": {
                "operationId": "RolesController_delete",
                "x-resourceset-urn": "iam-delete",
                "summary": "Delete a role of given org by role id",
                "parameters": [
                    {
                        "name": "x-api-key",
                        "in": "header",
                        "description": "API key",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "required": true,
                        "in": "path",
                        "description": "ID of the role to delete.",
                        "example": "9b11d29d-0205-421c-9aac-78ac726c7d83",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Role successfully deleted."
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "Bad Request Error": {
                                "example": {
                                    "statusCode": 400,
                                    "message": "Invalid request body. The message will vary depending on the cause.",
                                    "error": "Bad Request"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden Request",
                        "content": {
                            "Forbidden Request": {
                                "example": {
                                    "statusCode": 403,
                                    "message": "You do not have permission to do this action.",
                                    "error": "Forbidden Request"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "Not Found": {
                                "example": {
                                    "statusCode": 404,
                                    "message": "Role not found.",
                                    "error": "Not Found"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Request",
                        "content": {
                            "Too Many Request to Auth0 Error": {
                                "example": {
                                    "statusCode": 429,
                                    "message": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers.",
                                    "error": "Too Many Request"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Role Management"
                ],
                "security": [
                    {
                        "token": []
                    }
                ]
            }
        },
        "/api/v1/default-roles": {
            "post": {
                "operationId": "DefaultRolesController_create",
                "x-resourceset-urn": "iam-create",
                "summary": "Create new Default role (At top level)",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateDefaultRoleDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Default Role successfully created.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DefaultRole"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "Bad Request Error": {
                                "example": {
                                    "statusCode": 400,
                                    "message": "Invalid request body. The message will vary depending on the cause.",
                                    "error": "Bad Request"
                                }
                            },
                            "Bad Request": {
                                "example": {
                                    "message": [
                                        "organizationId must match /^org_[a-zA-Z0-9]{2,30}$/ regular expression",
                                        "organizationId should not be empty",
                                        "name must be shorter than or equal to 50 characters",
                                        "name must match /^[a-z0-9][a-z0-9_]{0,50}$/ regular expression",
                                        "name should not be empty",
                                        "displayName should not be empty"
                                    ],
                                    "error": "Bad Request",
                                    "statusCode": 400
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden Request",
                        "content": {
                            "Forbidden Request": {
                                "example": {
                                    "statusCode": 403,
                                    "message": "You do not have permission to do this action.",
                                    "error": "Forbidden Request"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict Request",
                        "content": {
                            "Conflict Error": {
                                "example": {
                                    "statusCode": 409,
                                    "message": "Another resource set with this name already exists in same organization.",
                                    "error": "Conflict"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Role Management"
                ],
                "security": [
                    {
                        "token": []
                    }
                ]
            },
            "get": {
                "operationId": "DefaultRolesController_findAll",
                "x-resourceset-urn": "iam-list",
                "summary": "Get all role can be set for organization (At top level) as default role by super admin",
                "parameters": [
                    {
                        "name": "filter",
                        "required": true,
                        "in": "query",
                        "description": "An object condition to search/filter",
                        "example": "{\"where\":{\"name\":\"xxx\"},\"take\": 10, \"skip\": 10, \"order\": {\"name\": -1}}",
                        "schema": {}
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Default Roles successfully retrieve.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/DefaultRole"
                                    }
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Role Management"
                ],
                "security": [
                    {
                        "token": []
                    }
                ]
            }
        },
        "/api/v1/default-roles/roles-for-onboard-org": {
            "get": {
                "operationId": "DefaultRolesController_findDefaultRoleOfOrg",
                "x-resourceset-urn": "iam-list",
                "summary": "Get list of default role able to assign to new org",
                "parameters": [
                    {
                        "name": "organizationId",
                        "required": false,
                        "in": "query",
                        "description": "Id of parent org, if new org is created without parent, leave this param empty",
                        "example": "org_ElN68kO8N3zEzgWy",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Default Roles successfully retrieve.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/OrgDefaultRoleDto"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "Bad Request Error": {
                                "example": {
                                    "statusCode": 400,
                                    "message": "Invalid request body. The message will vary depending on the cause.",
                                    "error": "Bad Request"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "Not Found": {
                                "example": {
                                    "statusCode": 404,
                                    "message": "No organization found by that id or name.",
                                    "error": "Not Found"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Request",
                        "content": {
                            "Too Many Request to Auth0 Error": {
                                "example": {
                                    "statusCode": 429,
                                    "message": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers.",
                                    "error": "Too Many Request"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Role Management"
                ],
                "security": [
                    {
                        "token": []
                    }
                ]
            }
        },
        "/api/v1/default-roles/{id}": {
            "get": {
                "operationId": "DefaultRolesController_findOne",
                "x-resourceset-urn": "iam-read",
                "summary": "Get a role can be set for organization (At top level) as default role by super admin",
                "parameters": [
                    {
                        "name": "id",
                        "required": true,
                        "in": "path",
                        "description": "ID of the default role to retrieve.",
                        "example": "df795f2f-c034-4b67-a1c2-87d49f7a5034",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Default Role successfully retrieve.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DefaultRole"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Role Management"
                ],
                "security": [
                    {
                        "token": []
                    }
                ]
            },
            "patch": {
                "operationId": "DefaultRolesController_update",
                "x-resourceset-urn": "iam-update",
                "summary": "Update a role can be set for organization (At top level)  as default role by super admin.",
                "parameters": [
                    {
                        "name": "id",
                        "required": true,
                        "in": "path",
                        "description": "ID of the default role to update.",
                        "example": "df795f2f-c034-4b67-a1c2-87d49f7a5034",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateDefaultRoleDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Default Role successfully updated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DefaultRole"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Role Management"
                ],
                "security": [
                    {
                        "token": []
                    }
                ]
            },
            "delete": {
                "operationId": "DefaultRolesController_remove",
                "x-resourceset-urn": "iam-delete",
                "summary": "Delete a role can be set for organization (At top level) as default by super admin.",
                "parameters": [
                    {
                        "name": "id",
                        "required": true,
                        "in": "path",
                        "description": "ID of the default role to delete.",
                        "example": "df795f2f-c034-4b67-a1c2-87d49f7a5034",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Default Role successfully removed with default role permissions."
                    }
                },
                "tags": [
                    "Role Management"
                ],
                "security": [
                    {
                        "token": []
                    }
                ]
            }
        },
        "/api/v1/default-role-privileges": {
            "post": {
                "operationId": "DefaultRolePrivilegesController_create",
                "x-resourceset-urn": "iam-create",
                "summary": "Create new privilege for a Default role (At top level)",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateDefaultRolePrivilegeDto"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": ""
                    }
                },
                "tags": [
                    "Role Management"
                ],
                "security": [
                    {
                        "token": []
                    }
                ]
            },
            "get": {
                "operationId": "DefaultRolePrivilegesController_findAll",
                "x-resourceset-urn": "iam-list",
                "summary": "Get all privileges for a Default role (At top level)",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": ""
                    }
                },
                "tags": [
                    "Role Management"
                ],
                "security": [
                    {
                        "token": []
                    }
                ]
            }
        },
        "/api/v1/default-role-privileges/{id}": {
            "get": {
                "operationId": "DefaultRolePrivilegesController_findOne",
                "x-resourceset-urn": "iam-read",
                "summary": "Get a privileges for a Default role (At top level)",
                "parameters": [
                    {
                        "name": "id",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    }
                },
                "tags": [
                    "Role Management"
                ],
                "security": [
                    {
                        "token": []
                    }
                ]
            },
            "patch": {
                "operationId": "DefaultRolePrivilegesController_update",
                "x-resourceset-urn": "iam-update",
                "summary": "Update a privileges for a Default role (At top level)",
                "parameters": [
                    {
                        "name": "id",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateDefaultRolePrivilegeDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": ""
                    }
                },
                "tags": [
                    "Role Management"
                ],
                "security": [
                    {
                        "token": []
                    }
                ]
            },
            "delete": {
                "operationId": "DefaultRolePrivilegesController_remove",
                "x-resourceset-urn": "iam-delete",
                "summary": "Remove a privilege for a Default role (At top level)",
                "parameters": [
                    {
                        "name": "id",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    }
                },
                "tags": [
                    "Role Management"
                ],
                "security": [
                    {
                        "token": []
                    }
                ]
            }
        },
        "/api/v1/clients": {
            "get": {
                "operationId": "ClientsController_findAll",
                "x-resourceset-urn": "iam-list",
                "summary": "Get clients",
                "parameters": [
                    {
                        "name": "filter",
                        "required": true,
                        "in": "query",
                        "description": "An object condition to search/filter",
                        "example": "{\"page\": 0, \"per_page\": 50, \"sort\": \"name:1\"}",
                        "schema": {}
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Clients successfully retrieved.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Client"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "Bad Request Error": {
                                "example": {
                                    "statusCode": 400,
                                    "message": "Invalid request body. The message will vary depending on the cause.",
                                    "error": "Bad Request"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden Request",
                        "content": {
                            "Forbidden Request": {
                                "example": {
                                    "statusCode": 403,
                                    "message": "You do not have permission to do this action.",
                                    "error": "Forbidden Request"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Request",
                        "content": {
                            "Too Many Request to Auth0 Error": {
                                "example": {
                                    "statusCode": 429,
                                    "message": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers.",
                                    "error": "Too Many Request"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Client Management"
                ]
            }
        },
        "/api/v1/auth/oauth/token": {
            "post": {
                "operationId": "AuthController_oAuthToken",
                "x-access-level": "public",
                "summary": "Sign In user with authorization code flow or refresh token",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/OauthTokenDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "SignIn user successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SignInResponseDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "Bad Request Error": {
                                "example": {
                                    "statusCode": 400,
                                    "message": "Invalid request body. The message will vary depending on the cause.",
                                    "error": "Bad Request"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Authentication"
                ]
            }
        },
        "/api/v1/auth/oauth/revoke": {
            "post": {
                "operationId": "AuthController_revokeRefreshToken",
                "x-access-level": "public",
                "summary": "Use this endpoint to invalidate a Refresh Token if it has been compromised.",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RevokeRefreshTokenDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The Refresh Token is revoked, does not exist, or was not issued to the client making the revocation request."
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "Bad Request Error": {
                                "example": {
                                    "statusCode": 400,
                                    "message": "Invalid request body. The message will vary depending on the cause.",
                                    "error": "Bad Request"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "The request is not authorized. Check that the client credentials (client_id and client_secret) are present in the request and hold valid values.."
                    }
                },
                "tags": [
                    "Authentication"
                ]
            }
        },
        "/api/v1/iam/utilities/files/pre-signed-url": {
            "post": {
                "operationId": "UtilitiesController_upload",
                "x-access-level": "public",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "file": {
                                        "type": "string",
                                        "format": "binary"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "File uploaded successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "operationId": "UtilitiesController_createS3PreSignedUrl",
                "x-resourceset-urn": "iam-read",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/iam/utilities/connections": {
            "get": {
                "operationId": "UtilitiesController_findAll",
                "x-resourceset-urn": "iam-list",
                "summary": "Get organizations",
                "parameters": [
                    {
                        "name": "filter",
                        "required": true,
                        "in": "query",
                        "description": "An object condition to search/filter",
                        "example": "{\"page\": 0, \"per_page\": 50,\"fields\":\"id,name\"}",
                        "schema": {}
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The connections were retrieved. See Response Class below for schema",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Organization"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "Bad Request Error": {
                                "example": {
                                    "statusCode": 400,
                                    "message": "Invalid request body. The message will vary depending on the cause.",
                                    "error": "Bad Request"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden Request",
                        "content": {
                            "Forbidden Request": {
                                "example": {
                                    "statusCode": 403,
                                    "message": "You do not have permission to do this action.",
                                    "error": "Forbidden Request"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Request",
                        "content": {
                            "Too Many Request to Auth0 Error": {
                                "example": {
                                    "statusCode": 429,
                                    "message": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers.",
                                    "error": "Too Many Request"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/privileges/{orgId}/{roleId}/privileges": {
            "get": {
                "operationId": "PrivilegesController_findByRole",
                "x-resourceset-urn": "iam-list",
                "summary": "Get a privilege of role",
                "parameters": [
                    {
                        "name": "roleId",
                        "required": true,
                        "in": "path",
                        "description": "ID of the role to retrieve.",
                        "example": "9b11d29d-0205-421c-9aac-78ac726c7d83",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "orgId",
                        "required": true,
                        "in": "path",
                        "description": "ID of current org",
                        "example": "org_ElN68kO8N3zEzgWy",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Role successfully retrieved.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/PrivilegesOfRoleDto"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "Bad Request Error": {
                                "example": {
                                    "statusCode": 400,
                                    "message": "Invalid request body. The message will vary depending on the cause.",
                                    "error": "Bad Request"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden Request",
                        "content": {
                            "Forbidden Request": {
                                "example": {
                                    "statusCode": 403,
                                    "message": "You do not have permission to do this action.",
                                    "error": "Forbidden Request"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "Not Found": {
                                "example": {
                                    "statusCode": 404,
                                    "message": "Role not found.",
                                    "error": "Not Found"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Request",
                        "content": {
                            "Too Many Request to Auth0 Error": {
                                "example": {
                                    "statusCode": 429,
                                    "message": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers.",
                                    "error": "Too Many Request"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Privilege Management"
                ],
                "security": [
                    {
                        "token": []
                    }
                ]
            }
        },
        "/api/v1/privileges/privileges/org-relation": {
            "get": {
                "operationId": "PrivilegesController_checkOrgRelationship",
                "x-resourceset-urn": "iam-read",
                "summary": "Check Acl for specific org",
                "parameters": [
                    {
                        "name": "onBeHalfOrgId",
                        "required": true,
                        "in": "query",
                        "description": "Org id of current user switch to",
                        "example": "org_rXoTymTPn9eagZfK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "targetOrgId",
                        "required": true,
                        "in": "query",
                        "description": "Org id which current logged in user try to get/modify data",
                        "example": "org_dmWVCSoQvnPO17jM",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "true: user has permission to access resource",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "Bad Request Error": {
                                "example": {
                                    "statusCode": 400,
                                    "message": "Invalid request body. The message will vary depending on the cause.",
                                    "error": "Bad Request"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden Request",
                        "content": {
                            "Forbidden Request": {
                                "example": {
                                    "statusCode": 403,
                                    "message": "You do not have permission to do this action.",
                                    "error": "Forbidden Request"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Request",
                        "content": {
                            "Too Many Request to Auth0 Error": {
                                "example": {
                                    "statusCode": 429,
                                    "message": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers.",
                                    "error": "Too Many Request"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Privilege Management"
                ],
                "security": [
                    {
                        "token": []
                    }
                ]
            }
        },
        "/api/v1/privileges/privileges/valid": {
            "get": {
                "operationId": "AclController_checkACL",
                "x-access-level": "public",
                "x-resourceset-urn": "iam-read",
                "summary": "Check Acl for specific resource",
                "parameters": [
                    {
                        "name": "authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-api-key",
                        "in": "header",
                        "description": "API key",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "resourceUri",
                        "required": true,
                        "in": "query",
                        "description": "Uri of requested resource",
                        "example": "/dam/abc12345",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "permission",
                        "required": true,
                        "in": "query",
                        "description": "permission corresponding to http method. GET | POST | PATCH | DELETE",
                        "example": "GET",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "true: user has permission to access resource",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "Bad Request Error": {
                                "example": {
                                    "statusCode": 400,
                                    "message": "Invalid request body. The message will vary depending on the cause.",
                                    "error": "Bad Request"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden Request",
                        "content": {
                            "Forbidden Request": {
                                "example": {
                                    "statusCode": 403,
                                    "message": "You do not have permission to do this action.",
                                    "error": "Forbidden Request"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Request",
                        "content": {
                            "Too Many Request to Auth0 Error": {
                                "example": {
                                    "statusCode": 429,
                                    "message": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers.",
                                    "error": "Too Many Request"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Privilege Management"
                ]
            }
        },
        "/api/v1/api-keys": {
            "post": {
                "operationId": "ApiKeyController_create",
                "x-resourceset-urn": "iam-create",
                "summary": "Create a api key for given org",
                "parameters": [
                    {
                        "name": "x-api-key",
                        "in": "header",
                        "description": "API key",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateApiKeyDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Api key successfully created.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiKeyDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "Bad Request Error": {
                                "example": {
                                    "statusCode": 400,
                                    "message": "Invalid request body. The message will vary depending on the cause.",
                                    "error": "Bad Request"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden Request",
                        "content": {
                            "Forbidden Request": {
                                "example": {
                                    "statusCode": 403,
                                    "message": "You do not have permission to do this action.",
                                    "error": "Forbidden Request"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Request",
                        "content": {
                            "Too Many Request to Auth0 Error": {
                                "example": {
                                    "statusCode": 429,
                                    "message": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers.",
                                    "error": "Too Many Request"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Api Key Management"
                ],
                "security": [
                    {
                        "token": []
                    }
                ]
            },
            "get": {
                "operationId": "ApiKeyController_findAll",
                "x-resourceset-urn": "iam-list",
                "summary": "Get api keys of given org",
                "parameters": [
                    {
                        "name": "x-api-key",
                        "in": "header",
                        "description": "API key",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter",
                        "required": true,
                        "in": "query",
                        "description": "An object condition to search/filter",
                        "example": "{\"skip\":0, \"take\":2, \"where\": {\"organizationId\": \"org_ElN68kO8N3zEzgWy\"}}",
                        "schema": {}
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Api Keys successfully retrieved.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ApiKeyDto"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "Bad Request Error": {
                                "example": {
                                    "statusCode": 400,
                                    "message": "Invalid request body. The message will vary depending on the cause.",
                                    "error": "Bad Request"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden Request",
                        "content": {
                            "Forbidden Request": {
                                "example": {
                                    "statusCode": 403,
                                    "message": "You do not have permission to do this action.",
                                    "error": "Forbidden Request"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Request",
                        "content": {
                            "Too Many Request to Auth0 Error": {
                                "example": {
                                    "statusCode": 429,
                                    "message": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers.",
                                    "error": "Too Many Request"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Api Key Management"
                ],
                "security": [
                    {
                        "token": []
                    }
                ]
            }
        },
        "/api/v1/api-keys/role-association": {
            "post": {
                "operationId": "ApiKeyController_createApiKeyAssociatedWithRoleDto",
                "x-resourceset-urn": "iam-create",
                "summary": "Create a api key associated with given role for given org",
                "parameters": [
                    {
                        "name": "x-api-key",
                        "in": "header",
                        "description": "API key",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateApiKeyAssociatedWithRoleDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Api key successfully created.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiKeyDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "Bad Request Error": {
                                "example": {
                                    "statusCode": 400,
                                    "message": "Invalid request body. The message will vary depending on the cause.",
                                    "error": "Bad Request"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden Request",
                        "content": {
                            "Forbidden Request": {
                                "example": {
                                    "statusCode": 403,
                                    "message": "You do not have permission to do this action.",
                                    "error": "Forbidden Request"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Request",
                        "content": {
                            "Too Many Request to Auth0 Error": {
                                "example": {
                                    "statusCode": 429,
                                    "message": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers.",
                                    "error": "Too Many Request"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Api Key Management"
                ],
                "security": [
                    {
                        "token": []
                    }
                ]
            }
        },
        "/api/v1/api-keys/{id}": {
            "patch": {
                "operationId": "ApiKeyController_updateOne",
                "x-resourceset-urn": "iam-update",
                "summary": "Deactivate an api key of given org by id",
                "parameters": [
                    {
                        "name": "x-api-key",
                        "in": "header",
                        "description": "API key",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "required": true,
                        "in": "path",
                        "description": "ID of the api key to update.",
                        "example": "9b11d29d-0205-421c-9aac-78ac726c7d83",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Api key successfully deactivated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiKeyDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "Bad Request Error": {
                                "example": {
                                    "statusCode": 400,
                                    "message": "Invalid request body. The message will vary depending on the cause.",
                                    "error": "Bad Request"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden Request",
                        "content": {
                            "Forbidden Request": {
                                "example": {
                                    "statusCode": 403,
                                    "message": "You do not have permission to do this action.",
                                    "error": "Forbidden Request"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Request",
                        "content": {
                            "Too Many Request to Auth0 Error": {
                                "example": {
                                    "statusCode": 429,
                                    "message": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers.",
                                    "error": "Too Many Request"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Api Key Management"
                ],
                "security": [
                    {
                        "token": []
                    }
                ]
            },
            "get": {
                "operationId": "ApiKeyController_findOne",
                "x-resourceset-urn": "iam-read",
                "summary": "Get a api key of given org by api key id",
                "parameters": [
                    {
                        "name": "x-api-key",
                        "in": "header",
                        "description": "API key",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "required": true,
                        "in": "path",
                        "description": "ID of the api key to retrieve.",
                        "example": "9b11d29d-0205-421c-9aac-78ac726c7d83",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Api key successfully retrieved.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiKeyDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "Bad Request Error": {
                                "example": {
                                    "statusCode": 400,
                                    "message": "Invalid request body. The message will vary depending on the cause.",
                                    "error": "Bad Request"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden Request",
                        "content": {
                            "Forbidden Request": {
                                "example": {
                                    "statusCode": 403,
                                    "message": "You do not have permission to do this action.",
                                    "error": "Forbidden Request"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "Not Found": {
                                "example": {
                                    "statusCode": 404,
                                    "message": "Api key not found.",
                                    "error": "Not Found"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Request",
                        "content": {
                            "Too Many Request to Auth0 Error": {
                                "example": {
                                    "statusCode": 429,
                                    "message": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers.",
                                    "error": "Too Many Request"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Api Key Management"
                ],
                "security": [
                    {
                        "token": []
                    }
                ]
            },
            "delete": {
                "operationId": "ApiKeyController_delete",
                "x-resourceset-urn": "iam-delete",
                "summary": "Delete a api key of given org by id",
                "parameters": [
                    {
                        "name": "x-api-key",
                        "in": "header",
                        "description": "API key",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "required": true,
                        "in": "path",
                        "description": "ID of the api key to delete.",
                        "example": "9b11d29d-0205-421c-9aac-78ac726c7d83",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Api key successfully deleted."
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "Bad Request Error": {
                                "example": {
                                    "statusCode": 400,
                                    "message": "Invalid request body. The message will vary depending on the cause.",
                                    "error": "Bad Request"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden Request",
                        "content": {
                            "Forbidden Request": {
                                "example": {
                                    "statusCode": 403,
                                    "message": "You do not have permission to do this action.",
                                    "error": "Forbidden Request"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "Not Found": {
                                "example": {
                                    "statusCode": 404,
                                    "message": "Api key not found.",
                                    "error": "Not Found"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Request",
                        "content": {
                            "Too Many Request to Auth0 Error": {
                                "example": {
                                    "statusCode": 429,
                                    "message": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers.",
                                    "error": "Too Many Request"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Api Key Management"
                ],
                "security": [
                    {
                        "token": []
                    }
                ]
            }
        }
    },
    "info": {
        "title": "BOT OS IAM API",
        "description": "The api service for BotOS IAM",
        "version": "1.0",
        "contact": {}
    },
    "tags": [],
    "servers": [],
    "components": {
        "securitySchemes": {
            "token": {
                "scheme": "Bearer",
                "bearerFormat": "JWT",
                "type": "http"
            }
        },
        "schemas": {
            "": {
                "type": "object",
                "properties": {}
            },
            "OrganizationBrandingColor": {
                "type": "object",
                "properties": {
                    "primary": {
                        "description": "HEX Color for primary elements",
                        "example": "#32a852",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "page_background": {
                        "description": "HEX Color for background",
                        "example": "#ffffff",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    }
                },
                "required": [
                    "primary",
                    "page_background"
                ]
            },
            "OrganizationBranding": {
                "type": "object",
                "properties": {
                    "logo_url": {
                        "description": "URL of logo to display on login page",
                        "example": "https://www.webtiga.com/wp-content/uploads/2022/04/webtiga_logo.png",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "colors": {
                        "description": "Color scheme used to customize the login pages",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/OrganizationBrandingColor"
                            }
                        ]
                    }
                },
                "required": [
                    "logo_url",
                    "colors"
                ]
            },
            "CreateOrganizationDto": {
                "type": "object",
                "properties": {
                    "name": {
                        "description": "The name of organization. Must only contain lowercase characters, '-', and '_', and start with a letter or number",
                        "example": "webtiga",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "display_name": {
                        "example": "Webtiga",
                        "default": "",
                        "description": "Friendly name of this organization.",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "branding": {
                        "description": "Theme defines how to style the login pages",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/OrganizationBranding"
                            }
                        ]
                    },
                    "parent_id": {
                        "description": "Parent Organization identifier",
                        "example": "parent_org_id",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "description": {
                        "description": "Any description",
                        "example": "description",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "enabled_connections": {
                        "description": "Connections that will be enabled for this organization. See POST enabled_connections endpoint for the object format. (Max of 10 connections allowed)",
                        "example": [
                            {
                                "connection_id": "con_gS9ioR5TccydRsSf",
                                "assign_membership_on_login": true
                            }
                        ],
                        "type": "array",
                        "items": {
                            "type": "array"
                        }
                    },
                    "roles": {
                        "description": "List of default roles IDs which will be assigned to new org. Empty value means all default roles will be assign",
                        "example": [
                            "19dbb6d1-4ce7-4535-9b73-5c4a0b2a8de2"
                        ],
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "name",
                    "roles"
                ]
            },
            "RoleDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "description": "The role identify",
                        "example": "df795f2f-c034-4b67-a1c2-87d49f7a5034",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "name": {
                        "description": "Unique identifier for the role within the system (internal use)",
                        "example": "super-admin",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "display_name": {
                        "description": "The display name of role",
                        "example": "Super Admin",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    }
                },
                "required": [
                    "id",
                    "name",
                    "display_name"
                ]
            },
            "WalletDto": {
                "type": "object",
                "properties": {
                    "roles": {
                        "description": "List of default roles",
                        "example": [
                            {
                                "id": "df795f2f-c034-4b67-a1c2-87d49f7a5034",
                                "name": "org-admin"
                            }
                        ],
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RoleDto"
                        }
                    },
                    "orgId": {
                        "type": "string",
                        "description": "organization id",
                        "example": "org_Ubd5Ztg2zty5bmK0"
                    },
                    "organisationWalletCreationHash": {
                        "type": "string",
                        "description": "wallet hash",
                        "example": "0xbf3575c554c2045f4aa94d95b2a3cb473d6e4bdd064be97d9674614f6ffffbc0"
                    },
                    "organisationWallet": {
                        "type": "string",
                        "description": "wallet address",
                        "example": "0xe90f5fa97c644a3e5e69f8802410d2b771f27385"
                    },
                    "saltNonce": {
                        "type": "number",
                        "description": "saltNonce",
                        "example": "8497638590727403"
                    }
                },
                "required": [
                    "roles",
                    "orgId",
                    "organisationWalletCreationHash",
                    "organisationWallet",
                    "saltNonce"
                ]
            },
            "OrganizationDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "description": "Organization identifier",
                        "example": "org_dFx7oiL9n1UeFvi5",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "name": {
                        "description": "The name of organization. Must only contain lowercase characters, '-', and '_', and start with a letter or number",
                        "example": "webtiga",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "display_name": {
                        "example": "Webtiga",
                        "default": "",
                        "description": "Friendly name of this organization.",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "branding": {
                        "description": "Theme defines how to style the login pages",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/OrganizationBranding"
                            }
                        ]
                    },
                    "metadata": {
                        "example": {},
                        "description": "Metadata associated with the organization, in the form of an object with string values (max 255 chars). Maximum of 10 metadata properties allowed.",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "parent_id": {
                        "description": "Parent Organization identifier",
                        "example": "parent_org_id",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "description": {
                        "description": "Any description",
                        "example": "description",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "created_by": {
                        "description": "UserId has create this data",
                        "example": "email|65e038e66ae919be22b146be",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "updated_by": {
                        "description": "The last UserId has change this data",
                        "example": "email|65e038e66ae919be22b146be",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "roles": {
                        "description": "List of default roles",
                        "example": [
                            {
                                "id": "df795f2f-c034-4b67-a1c2-87d49f7a5034",
                                "name": "org-admin"
                            }
                        ],
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RoleDto"
                        }
                    },
                    "wallet": {
                        "description": "Org Wallet Info",
                        "example": {
                            "orgId": "org_Ubd5Ztg2zty5bmK0",
                            "organisationWalletCreationHash": "0xbf3575c554c2045f4aa94d95b2a3cb473d6e4bdd064be97d9674614f6ffffbc0",
                            "organisationWallet": "0xe90f5fa97c644a3e5e69f8802410d2b771f27385",
                            "saltNonce": 8497638590727403
                        },
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/WalletDto"
                            }
                        ]
                    }
                },
                "required": [
                    "name",
                    "roles",
                    "wallet"
                ]
            },
            "Organization": {
                "type": "object",
                "properties": {
                    "id": {
                        "description": "Organization identifier",
                        "example": "org_dFx7oiL9n1UeFvi5",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "name": {
                        "description": "The name of organization. Must only contain lowercase characters, '-', and '_', and start with a letter or number",
                        "example": "webtiga",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "display_name": {
                        "example": "Webtiga",
                        "default": "",
                        "description": "Friendly name of this organization.",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "branding": {
                        "description": "Theme defines how to style the login pages",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/OrganizationBranding"
                            }
                        ]
                    },
                    "metadata": {
                        "example": {},
                        "description": "Metadata associated with the organization, in the form of an object with string values (max 255 chars). Maximum of 10 metadata properties allowed.",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "parent_id": {
                        "description": "Parent Organization identifier",
                        "example": "parent_org_id",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "description": {
                        "description": "Any description",
                        "example": "description",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "created_by": {
                        "description": "UserId has create this data",
                        "example": "email|65e038e66ae919be22b146be",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "updated_by": {
                        "description": "The last UserId has change this data",
                        "example": "email|65e038e66ae919be22b146be",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    }
                },
                "required": [
                    "name"
                ]
            },
            "UpdateOrganizationDto": {
                "type": "object",
                "properties": {
                    "name": {
                        "description": "The name of organization. Must only contain lowercase characters, '-', and '_', and start with a letter or number",
                        "example": "webtiga",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "display_name": {
                        "example": "Webtiga",
                        "default": "",
                        "description": "Friendly name of this organization.",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "branding": {
                        "description": "Theme defines how to style the login pages",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/OrganizationBranding"
                            }
                        ]
                    },
                    "metadata": {
                        "example": {},
                        "description": "Metadata associated with the organization, in the form of an object with string values (max 255 chars). Maximum of 10 metadata properties allowed.",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "description": {
                        "description": "Any description",
                        "example": "description",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    }
                }
            },
            "OrganizationInvitationInvitee": {
                "type": "object",
                "properties": {
                    "email": {
                        "description": "The invitee's email.",
                        "example": "vn.chemgio@yahoo.com",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    }
                },
                "required": [
                    "email"
                ]
            },
            "CreateOrganizationInvitationDto": {
                "type": "object",
                "properties": {
                    "invitee": {
                        "description": "Invitee",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/OrganizationInvitationInvitee"
                            }
                        ]
                    },
                    "connection": {
                        "type": "string",
                        "description": "The id of the connection to force invitee to authenticate with.",
                        "example": "email"
                    },
                    "roles": {
                        "description": "List of roles IDs to associated with the user.",
                        "example": [
                            "df795f2f-c034-4b67-a1c2-87d49f7a5034"
                        ],
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "invitee",
                    "connection",
                    "roles"
                ]
            },
            "OrganizationInvitationInviter": {
                "type": "object",
                "properties": {
                    "name": {
                        "description": "The inviter's name.",
                        "example": "Webmaster",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    }
                },
                "required": [
                    "name"
                ]
            },
            "UserInvitationDto": {
                "type": "object",
                "properties": {
                    "createdAt": {
                        "example": "2024-07-17T04:36:39.238Z",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "createdBy": {
                        "example": "df795f2f-c034-4b67-a1c2-87d49f7a5034",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "updatedBy": {
                        "example": "df795f2f-c034-4b67-a1c2-87d49f7a5034",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "id": {
                        "description": "The invitation identify",
                        "example": "df795f2f-c034-4b67-a1c2-87d49f7a5034",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "organization_id": {
                        "type": "string",
                        "description": "REFERENCES organization (id) in auth0",
                        "example": "org_dFx7oiL9n1UeFvi5"
                    },
                    "inviter": {
                        "description": "Inviter",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/OrganizationInvitationInviter"
                            }
                        ]
                    },
                    "invitee": {
                        "description": "Invitee",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/OrganizationInvitationInvitee"
                            }
                        ]
                    },
                    "invitation_url": {
                        "type": "string",
                        "description": "The invitation url to be send to the invitee.",
                        "example": "https://webtiga.com/?invitation=22ID0vnPrJ0hLBeoV9cdJ7OV8YQJUlXf&organization=org_dFx7oiL9n1UeFvi5&organization_name=webtiga"
                    },
                    "connection": {
                        "type": "string",
                        "description": "The id of the connection to force invitee to authenticate with.",
                        "example": "email"
                    },
                    "ticket_id": {
                        "type": "string",
                        "description": "The id of the invitation ticket",
                        "example": "22ID0vnPrJ0hLBeoV9cdJ7OV8YQJUlXf"
                    },
                    "expires_at": {
                        "format": "date-time",
                        "type": "string",
                        "description": "The ISO 8601 formatted timestamp representing the expiration time of the invitation.",
                        "example": "2023-09-24T15:24:37.213Z"
                    },
                    "roles": {
                        "description": "List of roles IDs to associated with the user.",
                        "example": [
                            "admin"
                        ],
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of invitation",
                        "example": "ACTIVE"
                    }
                },
                "required": [
                    "createdAt",
                    "createdBy",
                    "updatedBy",
                    "id",
                    "organization_id",
                    "inviter",
                    "invitee",
                    "invitation_url",
                    "connection",
                    "ticket_id",
                    "expires_at",
                    "roles",
                    "status"
                ]
            },
            "Connection": {
                "type": "object",
                "properties": {
                    "name": {
                        "description": "The name of the enabled connection.",
                        "example": "Username-Password-Authentication",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "strategy": {
                        "description": "The strategy of the enabled connection.",
                        "example": "auth0",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    }
                },
                "required": [
                    "name",
                    "strategy"
                ]
            },
            "OrganizationConnectionDto": {
                "type": "object",
                "properties": {
                    "connection_id": {
                        "description": "ID of the connection.",
                        "example": "con_33rMwBtY1PXZ65ME",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "assign_membership_on_login": {
                        "description": "When true, all users that log in with this connection will be automatically granted membership in the organization. When false, users must be granted membership in the organization before logging in with this connection.",
                        "example": true,
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "connection": {
                        "$ref": "#/components/schemas/Connection"
                    }
                },
                "required": [
                    "connection_id",
                    "assign_membership_on_login",
                    "connection"
                ]
            },
            "SubOrganizationAuth": {
                "type": "object",
                "properties": {
                    "subAccessToken": {
                        "type": "string",
                        "description": "subAccessToken",
                        "example": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6ImJIZVBrYXN3NDlBU2YyeGtUTWxhdiJ9.eyJpc3MiOiJodHRwczovL3VuaWZ5Z3B0LWlhbS1zdGcudXMuYXV0aDAuY29tLyIsInN1YiI6ImVtYWlsfDY1ZmE3NjIyNTEzOGU4OGFlYzI2MzE1MSIsImF1ZCI6WyJodHRwczovL3dlYnRpZ2EtZ3cuY29tL2RhbSIsImh0dHBzOi8vdW5pZnlncHQtaWFtLXN0Zy51cy5hdXRoMC5jb20vdXNlcmluZm8iXSwiaWF0IjoxNzE1NjgzNjgzLCJleHAiOjE3MTU3NzAwODMsInNjb3BlIjoib3BlbmlkIHByb2ZpbGUgZW1haWwgb2ZmbGluZV9hY2Nlc3MiLCJvcmdfaWQiOiJvcmdfaWMybGZQQzI1OGxNczV1OSIsImF6cCI6IlgzSFFhS0dYSlJTVFVId052UlIyR1llMkxHOWVCbnVzIiwicGVybWlzc2lvbnMiOltdfQ.krqTO8Qcg-2hYX-kT2S9TUUSeR7DKa7tLg-rKrMByomXu3BxlIHim2RUS7Tnmd6goKj-1Z0NHjbNdOGJTOJmDvWTWaAjJ729otGtfz3MtaETtMVYbQsdBdoCIPFW6S932dCxMeYT4XAobJ_mZc4VxgcWUJHc8XKVd4_GAmc5nhARwi0FhBmVVrX4JU4IWJAJ8FKcsXwBNYT-SYtO-BR14mljRl6RFgH-hEu5Jevan0KtfqNnZurDn3CnX_yqAo7IfbVwMZyPMXcwD5E5UfALr5F1TzAP_y9Rtp2I8uGv-yinStCpBzDcLMPWE7zs3mCHnaMym4L7WC6OTSPk3w344g"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "organization id",
                        "example": "org_ElN68kO8N3zEzgWy"
                    }
                },
                "required": [
                    "subAccessToken",
                    "organizationId"
                ]
            },
            "UserInvitationBriefDto": {
                "type": "object",
                "properties": {
                    "organization_id": {
                        "type": "string",
                        "description": "REFERENCES organization (id) in auth0",
                        "example": "org_dFx7oiL9n1UeFvi5"
                    },
                    "expires_at": {
                        "format": "date-time",
                        "type": "string",
                        "description": "The ISO 8601 formatted timestamp representing the expiration time of the invitation.",
                        "example": "2023-09-24T15:24:37.213Z"
                    },
                    "email": {
                        "type": "string",
                        "description": "email if invitee",
                        "example": "invite_user@mailinator.com"
                    }
                },
                "required": [
                    "organization_id",
                    "expires_at",
                    "email"
                ]
            },
            "UserInvitationOnboard": {
                "type": "object",
                "properties": {
                    "username": {
                        "description": "The username. Required when use Username - Password authentication ",
                        "example": "user_reg",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "given_name": {
                        "description": "The user's first name",
                        "example": "Doe",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "family_name": {
                        "description": "The user's last name",
                        "example": "Doe",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "phone_number": {
                        "description": "Phone number. If user use 'sms' connection, this field is unique, otherwise it's not",
                        "example": "+14155552671",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "picture": {
                        "description": "The URL of the user's picture. If unavailable, Auth0 uses the Gravatar image associated with the user's email address",
                        "example": "https://s.gravatar.com/avatar/249f7ac97665bb0e7f57af5f07050989?s=480&r=pg&d=https%3A%2F%2Fcdn.auth0.com%2Favatars%2Fvn.png",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    }
                },
                "required": [
                    "username",
                    "given_name",
                    "family_name",
                    "phone_number",
                    "picture"
                ]
            },
            "UserDto": {
                "type": "object",
                "properties": {
                    "user_id": {
                        "description": "The user's unique identifier. This is unique per Connection, but the same for all apps that authenticate via that Connection",
                        "example": "auth0|64d9c4a9e4780fda44d3206c",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "email": {
                        "description": "The user's email address",
                        "example": "vn.chemgio@yahoo.com",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "email_verified": {
                        "description": "A boolean indicating if the user's email address has been verified",
                        "example": true,
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "username": {
                        "description": "Username of this user.",
                        "example": "vn.chemgio",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "phone_number": {
                        "description": "Phone number for this user when using SMS connections. Follows the E.164 recommendation.",
                        "example": "+14155552671",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "phone_verified": {
                        "description": "Whether this phone number has been verified (true) or not (false).",
                        "example": true,
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "created_at": {
                        "type": "object",
                        "description": "The ISO 8601 formatted timestamp representing the creation time .",
                        "example": "2023-09-17T15:24:37.213Z"
                    },
                    "updated_at": {
                        "type": "object",
                        "description": "The ISO 8601 formatted timestamp representing the updated time.",
                        "example": "2023-09-24T15:24:37.213Z"
                    },
                    "app_metadata": {
                        "type": "object",
                        "description": "User metadata to which this user has read-only access.",
                        "example": {}
                    },
                    "user_metadata": {
                        "type": "object",
                        "description": "User metadata to which this user has read/write access.",
                        "example": {}
                    },
                    "picture": {
                        "description": "The URL of the user's picture. If unavailable, Auth0 uses the Gravatar image associated with the user's email address",
                        "example": "https://s.gravatar.com/avatar/249f7ac97665bb0e7f57af5f07050989?s=480&r=pg&d=https%3A%2F%2Fcdn.auth0.com%2Favatars%2Fvn.png",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "name": {
                        "description": "The user's full name",
                        "example": "John Doe",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "nickname": {
                        "description": "By default, the local part of the user's email",
                        "example": "vn.chemgio",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "multifactor": {
                        "description": "List of multi-factor authentication providers with which this user has enrolled.",
                        "example": [],
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "last_ip": {
                        "description": "Last IP address from which this user logged in.",
                        "example": "106.51.249.210",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "last_login": {
                        "type": "object",
                        "description": "The ISO 8601 formatted timestamp representing the last login time.",
                        "example": "2023-05-02T12:35:54.163Z"
                    },
                    "logins_count": {
                        "description": "Total number of logins this user has performed.",
                        "example": 1,
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "blocked": {
                        "type": "boolean",
                        "description": "Whether this user was blocked by an administrator (true) or is not (false).",
                        "example": false
                    },
                    "given_name": {
                        "description": "The user's email address",
                        "example": "John",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "family_name": {
                        "description": "The user's first name",
                        "example": "Doe",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "roles": {
                        "description": "The role of user",
                        "example": [
                            {
                                "id": "df795f2f-c034-4b67-a1c2-87d49f7a5034",
                                "name": "super-admin",
                                "display_name": "Super Admin"
                            }
                        ],
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RoleDto"
                        }
                    }
                },
                "required": [
                    "user_id",
                    "email",
                    "email_verified",
                    "username",
                    "phone_number",
                    "phone_verified",
                    "created_at",
                    "updated_at",
                    "app_metadata",
                    "user_metadata",
                    "picture",
                    "name",
                    "nickname",
                    "multifactor",
                    "last_ip",
                    "last_login",
                    "logins_count",
                    "blocked",
                    "given_name",
                    "family_name",
                    "roles"
                ]
            },
            "ResourceSetDto": {
                "type": "object",
                "properties": {
                    "name": {
                        "description": "Name of resource set",
                        "example": "Add user",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "id": {
                        "description": "Identify Id of this record",
                        "example": "df795f2f-c034-4b67-a1c2-87d49f7a5034",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "display_name": {
                        "description": "A display name for resource set",
                        "example": "A display name for resource set",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "resources": {
                        "description": "List of resource",
                        "example": [
                            {
                                "resource": "Get role list",
                                "resourceId": "9b11d29d-0205-421c-9aac-78ac726c7d83",
                                "method": [
                                    "GET"
                                ]
                            },
                            {
                                "resource": "Create user",
                                "resourceId": "9b11d29d-0205-421c-9aac-78ac726c7d84",
                                "method": [
                                    "POST"
                                ]
                            }
                        ],
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "name",
                    "id",
                    "display_name",
                    "resources"
                ]
            },
            "ServiceGroupListDto": {
                "type": "object",
                "properties": {
                    "name": {
                        "description": "Name of feature/Main menu for FE or resource set for BE",
                        "example": "User Management",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "display_name": {
                        "description": "A display name for service",
                        "example": "A display name for service",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "resourceSets": {
                        "description": "List of resourceSet as sub menu for FE",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ResourceSetDto"
                        }
                    },
                    "resources": {
                        "description": "List of resource, exist when item is resource set for BE, not FE feature/Menu",
                        "example": [
                            {
                                "resource": "Get role list",
                                "resourceId": "9b11d29d-0205-421c-9aac-78ac726c7d83",
                                "method": [
                                    "GET"
                                ]
                            },
                            {
                                "resource": "Create user",
                                "resourceId": "9b11d29d-0205-421c-9aac-78ac726c7d84",
                                "method": [
                                    "POST"
                                ]
                            }
                        ],
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "name",
                    "display_name",
                    "resourceSets",
                    "resources"
                ]
            },
            "CreateServiceGroupDto": {
                "type": "object",
                "properties": {
                    "name": {
                        "example": "user_management",
                        "description": "Technical name of service",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "display_name": {
                        "description": "A display name for service",
                        "example": "User Management",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "description": {
                        "description": "A description for service",
                        "example": "User Management",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "active": {
                        "description": "Status of service",
                        "example": true,
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    }
                },
                "required": [
                    "name",
                    "display_name",
                    "description",
                    "active"
                ]
            },
            "ServiceGroup": {
                "type": "object",
                "properties": {
                    "createdAt": {
                        "example": "2024-07-17T04:36:39.238Z",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "createdBy": {
                        "example": "df795f2f-c034-4b67-a1c2-87d49f7a5034",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "updatedBy": {
                        "example": "df795f2f-c034-4b67-a1c2-87d49f7a5034",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "id": {
                        "description": "Identify Id of this record",
                        "example": "df795f2f-c034-4b67-a1c2-87d49f7a5034",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "name": {
                        "example": "user_management",
                        "description": "Technical name of service",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "display_name": {
                        "description": "A display name for service",
                        "example": "User Management",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "description": {
                        "description": "A description for service",
                        "example": "User Management",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "active": {
                        "description": "Status of service",
                        "example": true,
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    }
                },
                "required": [
                    "createdAt",
                    "createdBy",
                    "updatedBy",
                    "id",
                    "name",
                    "display_name",
                    "description",
                    "active"
                ]
            },
            "UpdateServiceGroupDto": {
                "type": "object",
                "properties": {
                    "name": {
                        "example": "user_management",
                        "description": "Technical name of service",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "display_name": {
                        "description": "A display name for service",
                        "example": "User Management",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "description": {
                        "description": "A description for service",
                        "example": "User Management",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "active": {
                        "description": "Status of service",
                        "example": true,
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "resourceSetIds": {
                        "description": "An array of IDs to add or remove from the group.",
                        "example": [
                            "df795f2f-c034-4b67-a1c2-87d49f7a5034"
                        ],
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    }
                },
                "required": [
                    "resourceSetIds"
                ]
            },
            "CreateResourceSetDto": {
                "type": "object",
                "properties": {
                    "name": {
                        "description": "The name of resource set",
                        "example": "Resource set",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "display_name": {
                        "description": "A display name for resource set",
                        "example": "A display name for resource set",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "description": {
                        "description": "A display name for resource set",
                        "example": "A display name for resource set",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "is_active": {
                        "description": "This set is active?",
                        "example": true,
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "service_group_id": {
                        "example": "0debc250-cfd3-4a6a-8032-4d31fcb1be18",
                        "description": "The id of service group stored in IAM",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    }
                },
                "required": [
                    "name",
                    "display_name",
                    "description",
                    "is_active",
                    "service_group_id"
                ]
            },
            "ResourceSet": {
                "type": "object",
                "properties": {
                    "id": {
                        "description": "The resource set identify",
                        "example": "df795f2f-c034-4b67-a1c2-87d49f7a5034",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "name": {
                        "description": "The name of resource set",
                        "example": "Resource set",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "display_name": {
                        "description": "A display name for resource set",
                        "example": "A display name for resource set",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "description": {
                        "description": "A display name for resource set",
                        "example": "A display name for resource set",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "is_active": {
                        "description": "This set is active?",
                        "example": true,
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "created_by": {
                        "description": "UserId has create this data",
                        "example": "email|65e038e66ae919be22b146be",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "updated_by": {
                        "description": "The last UserId has change this data",
                        "example": "email|65e038e66ae919be22b146be",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "service_group_id": {
                        "example": "0debc250-cfd3-4a6a-8032-4d31fcb1be18",
                        "description": "The id of service group stored in IAM",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    }
                },
                "required": [
                    "id",
                    "name",
                    "display_name",
                    "description",
                    "is_active",
                    "service_group_id"
                ]
            },
            "UpdateResourceSetDto": {
                "type": "object",
                "properties": {
                    "display_name": {
                        "description": "A display name for resource set",
                        "example": "A display name for resource set",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "description": {
                        "description": "A display name for resource set",
                        "example": "A display name for resource set",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "is_active": {
                        "description": "This set is active?",
                        "example": true,
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    }
                }
            },
            "CreateResourceDto": {
                "type": "object",
                "properties": {
                    "name": {
                        "description": "The name of resource",
                        "example": "organization-management",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "display_name": {
                        "description": "The display_name of resource",
                        "example": "Get Organizations",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "technical_name": {
                        "description": "Technical Name of the resource",
                        "example": "organization_management",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "access_level": {
                        "type": "string",
                        "description": "Access Level",
                        "example": [
                            "private"
                        ]
                    },
                    "appId": {
                        "example": "qKtX9NkmMZefc3piDcnhz2vKGaUKGMN7",
                        "description": "A client can use this api",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "operationId": {
                        "description": "The unique string represent for resource, defined in api doc of each downstream service",
                        "example": "fc3piDcnhz2vKGaUK",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "description": {
                        "description": "Description of the resource",
                        "example": "Manage Org",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "uri": {
                        "description": "Resource Uri",
                        "example": "Resource Uri",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "is_active": {
                        "description": "This resource is active?",
                        "example": true,
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "resource_set_id": {
                        "example": "0debc250-cfd3-4a6a-8032-4d31fcb1be18",
                        "description": "The id of resource set stored in IAM",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "method": {
                        "description": "List permissions allow to choose",
                        "example": "POST",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    }
                },
                "required": [
                    "name",
                    "display_name",
                    "technical_name",
                    "access_level",
                    "appId",
                    "operationId",
                    "description",
                    "uri",
                    "is_active",
                    "resource_set_id",
                    "method"
                ]
            },
            "ResourceDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "description": "ID of the API (resource server)",
                        "example": "644a643fc023e970469d8e1e",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "name": {
                        "description": "The name of resource",
                        "example": "organization-management",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "display_name": {
                        "description": "The display_name of resource",
                        "example": "Get Organizations",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "technical_name": {
                        "description": "Technical Name of the resource",
                        "example": "organization_management",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "access_level": {
                        "type": "string",
                        "description": "Access Level",
                        "example": [
                            "private"
                        ]
                    },
                    "appId": {
                        "example": "qKtX9NkmMZefc3piDcnhz2vKGaUKGMN7",
                        "description": "A client can use this api",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "operationId": {
                        "description": "The unique string represent for resource, defined in api doc of each downstream service",
                        "example": "fc3piDcnhz2vKGaUK",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "description": {
                        "description": "Description of the resource",
                        "example": "Manage Org",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "uri": {
                        "description": "Resource Uri",
                        "example": "Resource Uri",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "is_active": {
                        "description": "This resource is active?",
                        "example": true,
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "resource_set_id": {
                        "example": "0debc250-cfd3-4a6a-8032-4d31fcb1be18",
                        "description": "The id of resource set stored in IAM",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "created_by": {
                        "description": "UserId has create this data",
                        "example": "email|65e038e66ae919be22b146be",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "updated_by": {
                        "description": "The last UserId has change this data",
                        "example": "email|65e038e66ae919be22b146be",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "method": {
                        "description": "List permissions allow to choose",
                        "example": "POST",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    }
                },
                "required": [
                    "name",
                    "display_name",
                    "technical_name",
                    "access_level",
                    "appId",
                    "operationId",
                    "description",
                    "uri",
                    "is_active",
                    "resource_set_id",
                    "method"
                ]
            },
            "ServiceApiVersion": {
                "type": "object",
                "properties": {
                    "createdAt": {
                        "example": "2024-07-17T04:36:39.238Z",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "createdBy": {
                        "example": "df795f2f-c034-4b67-a1c2-87d49f7a5034",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "updatedBy": {
                        "example": "df795f2f-c034-4b67-a1c2-87d49f7a5034",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "service_group_id": {
                        "example": "0debc250-cfd3-4a6a-8032-4d31fcb1be18",
                        "description": "The id of service group stored in IAM",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "service_name": {
                        "description": "The name of resource",
                        "example": "organization-management",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "service_path": {
                        "description": "Path in api gateway",
                        "example": "iam | dam",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "service_key": {
                        "description": "Path in api gateway",
                        "example": "23ddf09e2615e7b873ff4c66593a2286",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "latest_version": {
                        "description": "Latest version",
                        "example": "1.0.0",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "api_doc": {
                        "description": "latest api doc url",
                        "example": "https://bot-os-iam-dev.webtiga.com/api-doc-json",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "resource_set_url": {
                        "description": "latest api doc url",
                        "example": "https://bot-os-iam-dev.webtiga.com/resource-set-json",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    }
                },
                "required": [
                    "createdAt",
                    "createdBy",
                    "updatedBy",
                    "service_group_id",
                    "service_name",
                    "service_path",
                    "service_key",
                    "latest_version",
                    "api_doc",
                    "resource_set_url"
                ]
            },
            "UpdateResourceDto": {
                "type": "object",
                "properties": {
                    "name": {
                        "description": "The name of resource",
                        "example": "organization-management",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "display_name": {
                        "description": "The display_name of resource",
                        "example": "Get Organizations",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "technical_name": {
                        "description": "Technical Name of the resource",
                        "example": "organization_management",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "access_level": {
                        "type": "string",
                        "description": "Access Level",
                        "example": [
                            "private"
                        ]
                    },
                    "appId": {
                        "example": "qKtX9NkmMZefc3piDcnhz2vKGaUKGMN7",
                        "description": "A client can use this api",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "description": {
                        "description": "Description of the resource",
                        "example": "Manage Org",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "uri": {
                        "description": "Resource Uri",
                        "example": "Resource Uri",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "is_active": {
                        "description": "This resource is active?",
                        "example": true,
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "resource_set_id": {
                        "example": "0debc250-cfd3-4a6a-8032-4d31fcb1be18",
                        "description": "The id of resource set stored in IAM",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "method": {
                        "description": "List permissions allow to choose",
                        "example": "POST",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    }
                }
            },
            "UpdateUserDto": {
                "type": "object",
                "properties": {
                    "given_name": {
                        "description": "The user's first name",
                        "example": "Doe",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "family_name": {
                        "description": "The user's last name",
                        "example": "Doe",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "phone_number": {
                        "description": "Phone number. If user use 'sms' connection, this field is unique, otherwise it's not",
                        "example": "+14155552671",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "picture": {
                        "description": "The URL of the user's picture. If unavailable, Auth0 uses the Gravatar image associated with the user's email address",
                        "example": "https://s.gravatar.com/avatar/249f7ac97665bb0e7f57af5f07050989?s=480&r=pg&d=https%3A%2F%2Fcdn.auth0.com%2Favatars%2Fvn.png",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/"
                            }
                        ]
                    },
                    "blocked": {
                        "type": "boolean",
                        "description": "block user from login",
                        "example": "true"
                    },
                    "roles": {
                        "description": "List of roles IDs to associated with the user.",
                        "example": [
                            "541cf538-3c1b-4a48-95ed-57b755262f4c"
                        ],
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "blocked",
                    "roles"
                ]
            }
        }
    }
}
